{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1546855999572},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1546855999572},{"_id":"source/CNAME","hash":"0462016be96c1c49962e57aaf0db81d36ad4a3d7","modified":1546679525571},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1546855999571},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1546855999572},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1546855999573},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1546855999575},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1546855999575},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1546855999575},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1546855999575},{"_id":"themes/next/bower.json","hash":"09628558259cf990fac43ed1f5ef9edae73f124b","modified":1546855999576},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1546855999577},{"_id":"themes/next/README.md","hash":"b4f780a96b0e5d3737eb93bc00da6de91f042c4b","modified":1546855999576},{"_id":"themes/next/_config.yml","hash":"21095b74a820623e5aa1c3e6c82c781f279f3827","modified":1546855999576},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1546855999584},{"_id":"themes/next/package.json","hash":"c791b45d1e6fde11a1e1e11ba5a6ced1f5ba0fce","modified":1546855999629},{"_id":"source/_posts/nginx服务器安装及配置文件详解.md","hash":"15f491d9c578cf7512a58f598c9162d8edd75b62","modified":1546910885140},{"_id":"source/_posts/Markdown语法介绍.md","hash":"97bf47a54f7782926b451fe0d46429b8a8385f69","modified":1546862553757},{"_id":"themes/next/.git/FETCH_HEAD","hash":"f42406e12547b5a312325ee4b839cd17760865af","modified":1546856182427},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1546855999560},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1546855999565},{"_id":"themes/next/.git/ORIG_HEAD","hash":"9ff06b5b84deeadebdb87cdde5fe4bd167a4cbc6","modified":1546856182445},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1546855985369},{"_id":"themes/next/.git/packed-refs","hash":"2a34b2ea2e3539d9a0f1d57e783dba7038b17aa5","modified":1546855999558},{"_id":"themes/next/.git/index","hash":"432a0bcacc1f0dcc0507494bbf79daf650fd01e6","modified":1546856173525},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1546855999573},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1546855999574},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1546855999574},{"_id":"themes/next/.github/stale.yml","hash":"a782ac925201a8fe07959bba0d7696c7b2b5fd2d","modified":1546855999574},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1546855999574},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"b52d543b46c564f8ed7f69d1784cdaebf2621b16","modified":1546855999574},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1546855999577},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1546855999577},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1546855999578},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1546855999578},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1546855999578},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1546855999578},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1546855999579},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1546855999579},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1546855999579},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1546855999584},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1546855999585},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1546855999585},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1546855999585},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1546855999586},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1546855999586},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1546855999586},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1546855999585},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1546855999588},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1546855999587},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1546855999589},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1546855999588},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1546855999590},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1546855999589},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1546855999590},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1546855999590},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1546855999590},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1546855999591},{"_id":"themes/next/layout/_layout.swig","hash":"2c53b282edb0c7aa2a96cbd7e09ab66f05015394","modified":1546855999592},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1546855999627},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1546855999627},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1546855999627},{"_id":"themes/next/layout/page.swig","hash":"2d0e80e8a4dcba665704882b9dc5858c187acc31","modified":1546855999628},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1546855999636},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1546855999637},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1546855999629},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1546855999628},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1546855999628},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1546855999714},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1546855999714},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1546855999714},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999692},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1546855985372},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1546855985371},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1546855985369},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1546855985374},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1546855985374},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1546855985370},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1546855985371},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1546855985370},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1546855985372},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1546855985375},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1546855985368},{"_id":"themes/next/.git/logs/HEAD","hash":"d42fa74645d96891a9204f74a4e68e17572b5ae4","modified":1546855999561},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1546855999581},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1546855999580},{"_id":"themes/next/docs/ru/README.md","hash":"953deb732e0b3b22c423122a189d6847d908c4b8","modified":1546855999580},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1546855999580},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1546855999581},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1546855999581},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1546855999582},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1546855999582},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1546855999582},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1546855999583},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1546855999583},{"_id":"themes/next/docs/zh-CN/README.md","hash":"15e55eb77616500fa4c64982d6bad9ac17a46e2a","modified":1546855999583},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1546855999584},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1546855999591},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"35affac8c523f399e59fcc4d3905e03e4e1ed9aa","modified":1546855999594},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1546855999592},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1546855999592},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1546855999595},{"_id":"themes/next/layout/_partials/comments.swig","hash":"07340f3a4c8d8a9dd491d1eba18d985ecc0855a2","modified":1546855999595},{"_id":"themes/next/layout/_macro/post.swig","hash":"405a95821e316b2185806a6fb6bceda511024172","modified":1546855999594},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a1ded7ba92354ed55ae20a0b6bcc15bbb4b801c2","modified":1546855999595},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"11128d3fbe195d7d105e43cf774a1a70b2c1de24","modified":1546855999596},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"d01881f8056203c4b6920328db8c2ae8fa662a08","modified":1546855999604},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1546855999599},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1546855999605},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1546855999599},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1546855999605},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c4c58ea2bd4cf10372a5e46dbec1b9a2e0e69f0f","modified":1546855999608},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1546855999615},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01056ad0e5ad73885e02244943544d7b740bc3bb","modified":1546855999618},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1546855999619},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1546855999620},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1546855999620},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1546855999621},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"5453d76e00bfcd1d732fc5f41828a90eb681f645","modified":1546855999620},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"272c46f03766ea0c169163342bb98f09f561cf4c","modified":1546855999621},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1546855999621},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1546855999635},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"15582e823d228c0b2288543c1eb460c40afad29b","modified":1546855999635},{"_id":"themes/next/scripts/tags/button.js","hash":"08d5dfe05335f57d3e8392a74315766dafa52538","modified":1546855999638},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1546855999639},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1546855999639},{"_id":"themes/next/scripts/tags/full-image.js","hash":"22de989163c4678278c8a112160be6977f570234","modified":1546855999639},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"4775fffa526f1f7b40aa1f1c0a171dbcf5963df7","modified":1546855999640},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1546855999640},{"_id":"themes/next/scripts/tags/label.js","hash":"76735c88cfba2e53649387a7fa5176706c2d3c0c","modified":1546855999641},{"_id":"themes/next/scripts/tags/note.js","hash":"84ce2d2c0646baafc82083e261b093b1c515f63c","modified":1546855999641},{"_id":"themes/next/scripts/tags/tabs.js","hash":"8b1e9043db8f19ea4a12c473b3f729bd3b5bcb0e","modified":1546855999641},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1546855999692},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1546855999692},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1546855999692},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1546855999693},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1546855999693},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1546855999693},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1546855999694},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1546855999694},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1546855999694},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1546855999695},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1546855999696},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1546855999695},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1546855999696},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546855999697},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546855999696},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1546855999697},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1546855999697},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546855999698},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1546855999698},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999607},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999607},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999677},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999677},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999678},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999691},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546855999691},{"_id":"themes/next/.git/refs/heads/master","hash":"9ff06b5b84deeadebdb87cdde5fe4bd167a4cbc6","modified":1546855999561},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"58e2e153e8b67e643b24453a1e1cceaae3323647","modified":1546855999597},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1546855999597},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1546855999593},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1546855999593},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"fe0614f1c15cf4c6f4bb72afe4a65e10824c9cb0","modified":1546855999598},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1546855999598},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1546855999596},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"dc53a41196b675268bfd2a944f6258c57ed44e91","modified":1546855999596},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6a825ce9412339ec4a128d9714804994cb85522c","modified":1546855999597},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"2f73cc9ffb63534f0b6d8f0e9ee853c1af1b1244","modified":1546855999600},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1546855999598},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1546855999598},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"d63208ee20529450c35de8fe80ef41fffa831dc9","modified":1546855999601},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"64d65d9ad0cc94734ac6ded279e2b5dc870a1cab","modified":1546855999600},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1546855999600},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1546855999601},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1546855999601},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1546855999602},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1546855999602},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1546855999602},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1546855999603},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d5bfb363a1154e6505f0cccbd811fa71db133e3d","modified":1546855999603},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1546855999606},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1546855999608},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1546855999609},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1546855999606},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1546855999609},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1546855999609},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1546855999610},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1546855999610},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1546855999611},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1546855999612},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"529db1ff4b6c18822d6cf77f644a7f7b39c80870","modified":1546855999612},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1546855999613},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"9e576f12a294b14bd262f59c309a50cbf7003827","modified":1546855999612},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"5ced33d88f0e7c7546b8da7ff096c59bb0207cdf","modified":1546855999613},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1546855999614},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"cbf620cf2a78e3ac736cdd7e768513cfd6946e83","modified":1546855999614},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1546855999613},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f56552d4b4dca0d9b6fec18be9706cc3b404e788","modified":1546855999615},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d954a2954cba3bda9c92ef56e1f3ecceaa043bb3","modified":1546855999616},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"197207078ff0f4d46417b4413493e02cda0b85f4","modified":1546855999616},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"3489c16fd338a48ed52b6839da39182209130862","modified":1546855999616},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b5c64e10ac4cf396eb511c14eb45694387a905ca","modified":1546855999617},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1546855999618},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"379b709e4eff7869ee113ceaad23356654e95337","modified":1546855999618},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1546855999619},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1546855999619},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c76c7ac9b97e74908467701b10e25707ba5c979e","modified":1546855999620},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1546855999624},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"1c30b09d1855f1720f71f5956e0c9ca4d57b1231","modified":1546855999632},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"323ccd05bf8befb7d33de443cf3ac6a4195c3554","modified":1546855999626},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1546855999624},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1546855999625},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1546855999677},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1546855999677},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1546855999678},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1546855999677},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1546855999691},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1546855999690},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1546855999691},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1546855999691},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"5ee5355bb123511979f9e7ca5a532c0e29631b37","modified":1546855999699},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1546855999699},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1546855999698},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1546855999699},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1546855999699},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1546855999701},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1546855999700},{"_id":"themes/next/source/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1546855999700},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1546855999702},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"8b40c2f8f1e2bdafe555ce3304842e62d9e39ee1","modified":1546855999701},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1546855999702},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1546855999702},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1546855999702},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1546855999702},{"_id":"themes/next/source/js/src/utils.js","hash":"cc2f0c999fe7e0be7f933ad6e4d972b6ece8ddba","modified":1546855999701},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1546855999712},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1546855999713},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1546855999713},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1546855999709},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d42fa74645d96891a9204f74a4e68e17572b5ae4","modified":1546855999563},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1546855999560},{"_id":"themes/next/.git/objects/pack/pack-3a155436c1cf3b48607d69b0bc0a7ed83ebf791a.idx","hash":"089dea90810a9f9271696dc45001e8398f65ac63","modified":1546855999542},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"cd86bed852fec6e6933898067122a03755bc17f0","modified":1546855999623},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1546855999623},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"fe03041c387347e0bcf8efd1b4cf205ece66c339","modified":1546855999679},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a5e3c6da76f6d5bed70c38fdf5796faa759d473","modified":1546855999678},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1546855999680},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1546855999679},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1546855999681},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1546855999681},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1546855999684},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1546855999684},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1546855999682},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2dd866817d0bc7d179e81855f8fbcbb5d3c883fc","modified":1546855999682},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1546855999685},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1546855999685},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"09b5054ae34ba83c0d614821e574da265af55a14","modified":1546855999687},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1546855999686},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9b076c92abdadcf9acee75da64592ff3badd69b8","modified":1546855999688},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1546855999688},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1546855999688},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"fd54eb599d5003bbb1aabc08596bc24a3fa3294f","modified":1546855999689},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1546855999689},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1546855999689},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"837ff3718cb5a63eb01a451e35989fd1dfe4218c","modified":1546855999643},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1546855999643},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1546855999644},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1546855999644},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1546855999644},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1546855999653},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1546855999667},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"e3ad313825d7ad03e24bb76d036deeb50587022b","modified":1546855999675},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"513779f38d94a98511db14fe4527cdc453f426b8","modified":1546855999674},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1546855999676},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d33420ef9a655ecaa1c70af6d9bfed0740d8a5bf","modified":1546855999675},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"03d57bbe201e7d6865d5b303ee63f3f61c27c9d8","modified":1546855999677},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1546855999676},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1546855999676},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1546855999700},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1546855999704},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1546855999703},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1546855999704},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1546855999710},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1546855999710},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1546855999712},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546855999707},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546855999708},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d42fa74645d96891a9204f74a4e68e17572b5ae4","modified":1546855999560},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1546855999683},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1546855999683},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1546855999686},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"556e4e3a7f6fffd1c2db99dea4dc91b8cf23b36b","modified":1546855999645},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1546855999646},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"9e0f215868df17cb27a4a522fd31156c66428c2d","modified":1546855999645},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1546855999645},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1546855999646},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1546855999646},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1546855999647},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1546855999647},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"2dfa5fde3df69fba8282627e592fe637c2cbac6b","modified":1546855999648},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1546855999650},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1546855999650},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"61af2f656f6e916f9920277bd048c5d58ff32a60","modified":1546855999652},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1546855999649},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1546855999654},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1546855999651},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1546855999655},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1546855999656},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1546855999651},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1546855999657},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1546855999658},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ede576abad438366c8e81f47435242ade5a5a08c","modified":1546855999657},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"300491cf0e80c34faf5f83a2846c177759ac653f","modified":1546855999656},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"0e8294d042d7d28c680ead48baa9e3c777d407c5","modified":1546855999659},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b5e5aa7074a965e396229c5bd263fb406770ce5f","modified":1546855999659},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1546855999660},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1546855999660},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1546855999658},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1546855999661},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1546855999661},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1546855999662},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1546855999662},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"cee0e70d1a6ea963bfd707bf9cedb8a4637f64c2","modified":1546855999663},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1546855999663},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1546855999664},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1546855999664},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"671a7f8aa138259172e7c6268d82d7a62a1e036a","modified":1546855999665},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"b964782056658ac785ec6070e747c97a5e234ddb","modified":1546855999664},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5cfe1f02201fe4ede10ca680598072ef6c8a7d53","modified":1546855999666},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"9ab4e05e7b78af755ebdcbb71731fd723ed2d7f5","modified":1546855999666},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1546855999666},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1546855999668},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1546855999668},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1546855999668},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1546855999649},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1546855999669},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"0e760758221d4919902bda7c4d3bb96c94a678db","modified":1546855999670},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"070251836b57027c8240c51e41cb8e8c999c4525","modified":1546855999669},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"75f7876136fe1cae9b42d2c220e7f8b37b8d2f55","modified":1546855999671},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"7d2222f66a1c1a0a3cc90bfd5d817d9b859f4a68","modified":1546855999672},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1546855999672},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1546855999671},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"c415729e0f0d2439e63b93cec7ae32df54db87b4","modified":1546855999672},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1546855999673},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1546855999663},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1546855999673},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2d4f318644bf37c50e5b1fab8d62b2673fbab9e8","modified":1546855999674},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1546855999674},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"190ad18f45b8a69cef13b2fdd2254893d06ec2c3","modified":1546855999674},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546855999707},{"_id":"themes/next/.git/objects/pack/pack-3a155436c1cf3b48607d69b0bc0a7ed83ebf791a.pack","hash":"7c6a7705cba3f3fe3afbc1057e1a692f9ae68155","modified":1546855999537},{"_id":"public/archives/index.html","hash":"336c55a7ce77c19dd833868c5d6cab58ef0b5b28","modified":1546910979331},{"_id":"public/archives/2019/index.html","hash":"5d28285d9b300b1bfd5d00c9d64ac375e27991e1","modified":1546910979331},{"_id":"public/archives/2019/01/index.html","hash":"64922ddbdbe67ebbef76305ed567922261b73ad5","modified":1546910979332},{"_id":"public/2019/01/07/Markdown语法介绍/index.html","hash":"21b064dc6aa177e45d3fd9cce46055e370ff21da","modified":1546910979332},{"_id":"public/index.html","hash":"74ae9c50a5873d4aef8c56a4d3af7d8d61152fc5","modified":1546910979333},{"_id":"public/2019/01/08/nginx服务器安装及配置文件详解/index.html","hash":"c015a8d39bb55940172c32c8a8223ee0b5cc1713","modified":1546910979333}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Markdown语法介绍","date":"2019-01-07T11:36:49.000Z","_content":"\n___Markdown 是一种轻量级标记语言，让写作者专注于写作而不用关注样式。Coding 的许多版块均采用了 Markdown 语法，比如冒泡、讨论、Pull Request 等。___\n\n#### 标题\n\n用 Markdown 书写时，只需要在文本前面加上『# 』即可创建一级标题。同理，创建二级标题、三级标题等只需要增加『# 』个数即可，Markdown 共支持六级标题。如下所示：\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n点击预览可以看到效果：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d46c3a8f-b74a-4008-ad1d-a56be443d5fa.png)\n\n#### 锚点\n\nCoding 会针对每个标题，在解析时都会添加锚点 id，如\n\n```\n# 锚点\n```\n\n会被解析成：\n\n```\n<h1 id=\"user-content-锚点\">锚点</h1>\n```\n\n注意我们添加了一个 user-content- 的前缀，所以如果要自己添加跳转链接要使用 Markdown 的形式，且链接要加一个 user-content- 前缀，如：\n\n```\n[访问链接](#user-content-锚点);\n```\n\n#### 引用\n\nMarkdown 标记区块引用和 email 中用 『>』的引用方式类似，只需要在整个段落的第一行最前面加上 『>』 ：\n\n```\n> Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d735ad0c-2113-48dd-ae5d-2d3b3fca6977.png)\n\n区块引用可以嵌套，只要根据层次加上不同数量的『>』：\n\n```\n> 这是第一级引用。\n>\n> > 这是第二级引用。\n>\n> 现在回到第一级引用。\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/db2ce6d5-5dc9-4c92-b226-50174d853eb9.png)\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：\n\n```\n> ## 这是一个标题。\n> 1. 这是第一行列表项。\n> 2. 这是第二行列表项。\n>\n> 给出一些例子代码：\n>\n> return shell_exec(`echo $input | $markdown_script`);\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/a3485b98-6e38-45f2-9c9c-fb0b5027174c.png)\n\n#### 列表\n\n列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。\n\n**无序列表**：使用星号、加号或是减号作为列表标记\n\n```\n- Red\n- Green\n- Blue\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d5772b14-8976-4e9f-945b-4b06d2a6e8f1.png)\n\n**有序列表**：使用数字接着一个英文句点\n\n```\n1. Red\n2. Green\n3. Blue\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d0321f44-c344-43d4-817e-9040735cf5b3.png)\n\n如果要在列表项目内放进引用，那『>』就需要缩进：\n\n```\n*  Coding.net有以下主要功能:\n    > 代码托管平台\n    > 在线运行环境    \n    > 代码质量监控    \n    > 项目管理平台\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/21bfcf00-3a71-4b90-9f6e-e692dd3100a2.png)\n\n代办列表: 表示列表是否勾选状态（注意：[ ] 前后都要有空格）\n\n```\n- [ ] 不勾选\n- [x] 勾选\n```\n\n效果图如下：\n\n![图片](https://dn-coding-net-production-pp.codehub.cn/6ff6802f-8105-4a6b-b8a4-2abc380c1107.png)\n\n#### 代码\n\n只要把你的代码块包裹在 “` 之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 Ruby 代码着色：\n\n​```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n​```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/64a6b611-e0b9-443d-b7a2-c134613b63f9.png)\n\n#### 强调\n\n在Markdown中，可以使用 * 和  _  来表示斜体和加粗。\n\n**斜体**：\n\n```\n*Coding，让开发更简单*\n_Coding，让开发更简单_\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/0e72e420-fd75-4dc8-8093-66a57e38cd68.png)\n\n**加粗**：\n\n```\n**Coding，让开发更简单**\n__Coding，让开发更简单__\n```\n\n*效果图如下：*\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/372a6abf-f801-4a70-9f20-49f9e7db632d.png)\n\n#### 自动链接\n\n方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：\n\n```\n[超强大的云开发平台Coding](http://coding.net)\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/3aeea7b8-a675-4491-adbb-b64b1145ff1a.png)\n\n#### 表格\n\n在 Markdown 中，可以制作表格，例如：\n\n```\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/9a77d37a-95d4-4ad6-ab09-0d41f766fe34.jpg)\n\n或者也可以让表格两边内容对齐，中间内容居中，例如：\n\n```\nFirst Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/0d4014c0-3f54-462a-8a99-4706c62b9e5e.jpg)\n\n#### 分割线\n\n在 Markdown 中，可以使用 3 个以上『-』符号制作分割线，例如：\n\n```\n这是分隔线上部分内容\n---\n这是分隔线上部分内容\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/aeb88b18-688b-41e9-a4a3-0f970ab3af3e.png)\n\n#### 图片\n\nMarkdown 使用了类似链接的语法来插入图片, 包含两种形式: **内联** 和 **引用**.\n\n**内联图片语法如下**:\n\n```\n![Alt text](/path/to/img.jpg)\n或\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\n也就是:\n\n- 一个惊叹号『!』\n- 接着一个方括号，里面是图片的替代文字\n- 接着一个普通括号，里面是图片的网址，最后还可以用引号包住并加上 选择性的『title’』文字。\n\n**引用图片语法如下**:\n\n```\n![Alt text][id]\n```\n\n『id』 是图片引用的名称. 图片引用使用链接定义的相同语法:\n\n```\n[id]: url/to/image \"Optional title attribute\"\n```\n\n#### 流程图\n\nMarkdown 编辑器已支持绘制流程图、时序图和甘特图。通过 mermaid 实现图形的插入，点击查看 [更多语法详情](https://mermaidjs.github.io/)。\n\n​```graph\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->E;\n    E-->F;\n    D-->F;\n    F-->G;\n​```\n\n效果图如下：\n\n![img](https://dn-coding-net-production-pp.codehub.cn/9a6a38b8-172e-47f7-8464-b31948728149.jpg)\n\n#### 时序图\n\n​```graph\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->John: Hello John, how are you?\n    loop Healthcheck\n        John->John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts \nprevail...\n    John-->Alice: Great!\n    John->Bob: How about you?\n    Bob-->John: Jolly good!\n​```\n\n效果图如下：![img](https://dn-coding-net-production-pp.codehub.cn/65d713f4-4088-4988-8959-79ba16b1fa6e.jpg)\n\n#### 甘特图\n\n​```graph\ngantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section A section\n        Completed task            :done,    des1, 2014-01-06,2014-01-08\n        Active task               :active,  des2, 2014-01-09, 3d\n        Future task               :         des3, after des2, 5d\n        Future task2               :         des4, after des3, 5d\n        section Critical tasks\n        Completed task in the critical line :crit, done, 2014-01-06,24h\n        Implement parser and jison          :crit, done, after des1, 2d\n        Create tests for parser             :crit, active, 3d\n        Future task in critical line        :crit, 5d\n        Create tests for renderer           :2d\n        Add to mermaid                      :1d\n​```\n\n效果图如下：![img](https://dn-coding-net-production-pp.codehub.cn/651d802e-6409-4cf0-a3dd-b260c8d2cc60.jpg)\n\n#### 注释\n\n##### html标签\n\n既然Markdown内嵌html语法，那么就可以用可以用隐藏的html标签。\n\n**注意：需要在前面空一行**\n\n```\n<div style='display: none'>\n哈哈我是注释，不会在浏览器中显示。\n我也是注释。\n</div>\n```\n\n##### html注释\n\n既然支持html语法，那也支持html注释。\n\n```\n<!--哈哈我是注释，不会在浏览器中显示。-->\n\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n```\n\n##### hack方法\n\nhack方法就是利用markdown的解析原理来实现注释的。\n\n*一般有的markdown解析器不支持上面的注释方法，这个时候就可以用hack方法。*\n\nhack方法比上面2种方法稳定得多，但是语义化太差。\n\n```\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n其中，这种方法最稳定，适用性最强：\n\n```\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n这种方法最可爱，超级无敌萌啊：\n\n```\n[^_^]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n##### 示例测试\n\n1.html标签（你如果看不到下面的注释说明已经成功注释）\n\n<div style='display: none'>\n哈哈我是注释，不会在浏览器中显示。\n我也是注释。\n</div>\n\n2.html注释（你如果看不到下面的注释说明已经成功注释）\n\n<!--哈哈我是注释，不会在浏览器中显示。-->\n\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n\n3.hack注释（你如果看不到下面的注释说明已经成功注释）\n\n[^_^]: # (哈哈我是注释，不会在浏览器中显示。)\n\n>参考：\n>1.[Markdown语法介绍](https://coding.net/help/doc/project/markdown.html)\n>2.[markdown注释](https://www.imooc.com/article/23400)\n>3.[Markdown 语法手册 （完整整理版）](https://yuhongjun.github.io/tech/2017/05/02/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C-%E5%AE%8C%E6%95%B4%E6%95%B4%E7%90%86%E7%89%88.html)\n","source":"_posts/Markdown语法介绍.md","raw":"---\ntitle: Markdown语法介绍\ndate: 2019-01-07 19:36:49\ntags:\n---\n\n___Markdown 是一种轻量级标记语言，让写作者专注于写作而不用关注样式。Coding 的许多版块均采用了 Markdown 语法，比如冒泡、讨论、Pull Request 等。___\n\n#### 标题\n\n用 Markdown 书写时，只需要在文本前面加上『# 』即可创建一级标题。同理，创建二级标题、三级标题等只需要增加『# 』个数即可，Markdown 共支持六级标题。如下所示：\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n点击预览可以看到效果：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d46c3a8f-b74a-4008-ad1d-a56be443d5fa.png)\n\n#### 锚点\n\nCoding 会针对每个标题，在解析时都会添加锚点 id，如\n\n```\n# 锚点\n```\n\n会被解析成：\n\n```\n<h1 id=\"user-content-锚点\">锚点</h1>\n```\n\n注意我们添加了一个 user-content- 的前缀，所以如果要自己添加跳转链接要使用 Markdown 的形式，且链接要加一个 user-content- 前缀，如：\n\n```\n[访问链接](#user-content-锚点);\n```\n\n#### 引用\n\nMarkdown 标记区块引用和 email 中用 『>』的引用方式类似，只需要在整个段落的第一行最前面加上 『>』 ：\n\n```\n> Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d735ad0c-2113-48dd-ae5d-2d3b3fca6977.png)\n\n区块引用可以嵌套，只要根据层次加上不同数量的『>』：\n\n```\n> 这是第一级引用。\n>\n> > 这是第二级引用。\n>\n> 现在回到第一级引用。\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/db2ce6d5-5dc9-4c92-b226-50174d853eb9.png)\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：\n\n```\n> ## 这是一个标题。\n> 1. 这是第一行列表项。\n> 2. 这是第二行列表项。\n>\n> 给出一些例子代码：\n>\n> return shell_exec(`echo $input | $markdown_script`);\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/a3485b98-6e38-45f2-9c9c-fb0b5027174c.png)\n\n#### 列表\n\n列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。\n\n**无序列表**：使用星号、加号或是减号作为列表标记\n\n```\n- Red\n- Green\n- Blue\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d5772b14-8976-4e9f-945b-4b06d2a6e8f1.png)\n\n**有序列表**：使用数字接着一个英文句点\n\n```\n1. Red\n2. Green\n3. Blue\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/d0321f44-c344-43d4-817e-9040735cf5b3.png)\n\n如果要在列表项目内放进引用，那『>』就需要缩进：\n\n```\n*  Coding.net有以下主要功能:\n    > 代码托管平台\n    > 在线运行环境    \n    > 代码质量监控    \n    > 项目管理平台\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/21bfcf00-3a71-4b90-9f6e-e692dd3100a2.png)\n\n代办列表: 表示列表是否勾选状态（注意：[ ] 前后都要有空格）\n\n```\n- [ ] 不勾选\n- [x] 勾选\n```\n\n效果图如下：\n\n![图片](https://dn-coding-net-production-pp.codehub.cn/6ff6802f-8105-4a6b-b8a4-2abc380c1107.png)\n\n#### 代码\n\n只要把你的代码块包裹在 “` 之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 Ruby 代码着色：\n\n​```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n​```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/64a6b611-e0b9-443d-b7a2-c134613b63f9.png)\n\n#### 强调\n\n在Markdown中，可以使用 * 和  _  来表示斜体和加粗。\n\n**斜体**：\n\n```\n*Coding，让开发更简单*\n_Coding，让开发更简单_\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/0e72e420-fd75-4dc8-8093-66a57e38cd68.png)\n\n**加粗**：\n\n```\n**Coding，让开发更简单**\n__Coding，让开发更简单__\n```\n\n*效果图如下：*\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/372a6abf-f801-4a70-9f20-49f9e7db632d.png)\n\n#### 自动链接\n\n方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：\n\n```\n[超强大的云开发平台Coding](http://coding.net)\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/3aeea7b8-a675-4491-adbb-b64b1145ff1a.png)\n\n#### 表格\n\n在 Markdown 中，可以制作表格，例如：\n\n```\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/9a77d37a-95d4-4ad6-ab09-0d41f766fe34.jpg)\n\n或者也可以让表格两边内容对齐，中间内容居中，例如：\n\n```\nFirst Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/0d4014c0-3f54-462a-8a99-4706c62b9e5e.jpg)\n\n#### 分割线\n\n在 Markdown 中，可以使用 3 个以上『-』符号制作分割线，例如：\n\n```\n这是分隔线上部分内容\n---\n这是分隔线上部分内容\n```\n\n效果图如下：\n\n![在这里输入图片描述](https://dn-coding-net-production-pp.codehub.cn/aeb88b18-688b-41e9-a4a3-0f970ab3af3e.png)\n\n#### 图片\n\nMarkdown 使用了类似链接的语法来插入图片, 包含两种形式: **内联** 和 **引用**.\n\n**内联图片语法如下**:\n\n```\n![Alt text](/path/to/img.jpg)\n或\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\n也就是:\n\n- 一个惊叹号『!』\n- 接着一个方括号，里面是图片的替代文字\n- 接着一个普通括号，里面是图片的网址，最后还可以用引号包住并加上 选择性的『title’』文字。\n\n**引用图片语法如下**:\n\n```\n![Alt text][id]\n```\n\n『id』 是图片引用的名称. 图片引用使用链接定义的相同语法:\n\n```\n[id]: url/to/image \"Optional title attribute\"\n```\n\n#### 流程图\n\nMarkdown 编辑器已支持绘制流程图、时序图和甘特图。通过 mermaid 实现图形的插入，点击查看 [更多语法详情](https://mermaidjs.github.io/)。\n\n​```graph\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->E;\n    E-->F;\n    D-->F;\n    F-->G;\n​```\n\n效果图如下：\n\n![img](https://dn-coding-net-production-pp.codehub.cn/9a6a38b8-172e-47f7-8464-b31948728149.jpg)\n\n#### 时序图\n\n​```graph\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->John: Hello John, how are you?\n    loop Healthcheck\n        John->John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts \nprevail...\n    John-->Alice: Great!\n    John->Bob: How about you?\n    Bob-->John: Jolly good!\n​```\n\n效果图如下：![img](https://dn-coding-net-production-pp.codehub.cn/65d713f4-4088-4988-8959-79ba16b1fa6e.jpg)\n\n#### 甘特图\n\n​```graph\ngantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section A section\n        Completed task            :done,    des1, 2014-01-06,2014-01-08\n        Active task               :active,  des2, 2014-01-09, 3d\n        Future task               :         des3, after des2, 5d\n        Future task2               :         des4, after des3, 5d\n        section Critical tasks\n        Completed task in the critical line :crit, done, 2014-01-06,24h\n        Implement parser and jison          :crit, done, after des1, 2d\n        Create tests for parser             :crit, active, 3d\n        Future task in critical line        :crit, 5d\n        Create tests for renderer           :2d\n        Add to mermaid                      :1d\n​```\n\n效果图如下：![img](https://dn-coding-net-production-pp.codehub.cn/651d802e-6409-4cf0-a3dd-b260c8d2cc60.jpg)\n\n#### 注释\n\n##### html标签\n\n既然Markdown内嵌html语法，那么就可以用可以用隐藏的html标签。\n\n**注意：需要在前面空一行**\n\n```\n<div style='display: none'>\n哈哈我是注释，不会在浏览器中显示。\n我也是注释。\n</div>\n```\n\n##### html注释\n\n既然支持html语法，那也支持html注释。\n\n```\n<!--哈哈我是注释，不会在浏览器中显示。-->\n\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n```\n\n##### hack方法\n\nhack方法就是利用markdown的解析原理来实现注释的。\n\n*一般有的markdown解析器不支持上面的注释方法，这个时候就可以用hack方法。*\n\nhack方法比上面2种方法稳定得多，但是语义化太差。\n\n```\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[comment]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: <> (哈哈我是注释，不会在浏览器中显示。)\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n其中，这种方法最稳定，适用性最强：\n\n```\n[//]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n这种方法最可爱，超级无敌萌啊：\n\n```\n[^_^]: # (哈哈我是注释，不会在浏览器中显示。)\n```\n\n##### 示例测试\n\n1.html标签（你如果看不到下面的注释说明已经成功注释）\n\n<div style='display: none'>\n哈哈我是注释，不会在浏览器中显示。\n我也是注释。\n</div>\n\n2.html注释（你如果看不到下面的注释说明已经成功注释）\n\n<!--哈哈我是注释，不会在浏览器中显示。-->\n\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n\n3.hack注释（你如果看不到下面的注释说明已经成功注释）\n\n[^_^]: # (哈哈我是注释，不会在浏览器中显示。)\n\n>参考：\n>1.[Markdown语法介绍](https://coding.net/help/doc/project/markdown.html)\n>2.[markdown注释](https://www.imooc.com/article/23400)\n>3.[Markdown 语法手册 （完整整理版）](https://yuhongjun.github.io/tech/2017/05/02/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C-%E5%AE%8C%E6%95%B4%E6%95%B4%E7%90%86%E7%89%88.html)\n","slug":"Markdown语法介绍","published":1,"updated":"2019-01-07T12:02:33.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqn2g2k70000kaau2aegz9ai","content":"<p><strong><em>Markdown 是一种轻量级标记语言，让写作者专注于写作而不用关注样式。Coding 的许多版块均采用了 Markdown 语法，比如冒泡、讨论、Pull Request 等。</em></strong></p>\n<h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><p>用 Markdown 书写时，只需要在文本前面加上『# 』即可创建一级标题。同理，创建二级标题、三级标题等只需要增加『# 』个数即可，Markdown 共支持六级标题。如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<p>点击预览可以看到效果：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d46c3a8f-b74a-4008-ad1d-a56be443d5fa.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h4><p>Coding 会针对每个标题，在解析时都会添加锚点 id，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 锚点</span><br></pre></td></tr></table></figure>\n<p>会被解析成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 id=&quot;user-content-锚点&quot;&gt;锚点&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>注意我们添加了一个 user-content- 的前缀，所以如果要自己添加跳转链接要使用 Markdown 的形式，且链接要加一个 user-content- 前缀，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问链接](#user-content-锚点);</span><br></pre></td></tr></table></figure>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>Markdown 标记区块引用和 email 中用 『&gt;』的引用方式类似，只需要在整个段落的第一行最前面加上 『&gt;』 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d735ad0c-2113-48dd-ae5d-2d3b3fca6977.png\" alt=\"在这里输入图片描述\"></p>\n<p>区块引用可以嵌套，只要根据层次加上不同数量的『&gt;』：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这是第一级引用。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; &gt; 这是第二级引用。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 现在回到第一级引用。</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/db2ce6d5-5dc9-4c92-b226-50174d853eb9.png\" alt=\"在这里输入图片描述\"></p>\n<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ## 这是一个标题。</span><br><span class=\"line\">&gt; 1. 这是第一行列表项。</span><br><span class=\"line\">&gt; 2. 这是第二行列表项。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 给出一些例子代码：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; return shell_exec(`echo $input | $markdown_script`);</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/a3485b98-6e38-45f2-9c9c-fb0b5027174c.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><p>列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。</p>\n<p><strong>无序列表</strong>：使用星号、加号或是减号作为列表标记</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Red</span><br><span class=\"line\">- Green</span><br><span class=\"line\">- Blue</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d5772b14-8976-4e9f-945b-4b06d2a6e8f1.png\" alt=\"在这里输入图片描述\"></p>\n<p><strong>有序列表</strong>：使用数字接着一个英文句点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Red</span><br><span class=\"line\">2. Green</span><br><span class=\"line\">3. Blue</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d0321f44-c344-43d4-817e-9040735cf5b3.png\" alt=\"在这里输入图片描述\"></p>\n<p>如果要在列表项目内放进引用，那『&gt;』就需要缩进：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*  Coding.net有以下主要功能:</span><br><span class=\"line\">    &gt; 代码托管平台</span><br><span class=\"line\">    &gt; 在线运行环境    </span><br><span class=\"line\">    &gt; 代码质量监控    </span><br><span class=\"line\">    &gt; 项目管理平台</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/21bfcf00-3a71-4b90-9f6e-e692dd3100a2.png\" alt=\"在这里输入图片描述\"></p>\n<p>代办列表: 表示列表是否勾选状态（注意：[ ] 前后都要有空格）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [ ] 不勾选</span><br><span class=\"line\">- [x] 勾选</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/6ff6802f-8105-4a6b-b8a4-2abc380c1107.png\" alt=\"图片\"></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>只要把你的代码块包裹在 “` 之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 Ruby 代码着色：</p>\n<p>​<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redcarpet'</span></span><br><span class=\"line\">markdown = Redcarpet.new(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">puts markdown.to_html</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/64a6b611-e0b9-443d-b7a2-c134613b63f9.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h4><p>在Markdown中，可以使用 * 和  _  来表示斜体和加粗。</p>\n<p><strong>斜体</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*Coding，让开发更简单*</span><br><span class=\"line\">_Coding，让开发更简单_</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/0e72e420-fd75-4dc8-8093-66a57e38cd68.png\" alt=\"在这里输入图片描述\"></p>\n<p><strong>加粗</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Coding，让开发更简单**</span><br><span class=\"line\">__Coding，让开发更简单__</span><br></pre></td></tr></table></figure>\n<p><em>效果图如下：</em></p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/372a6abf-f801-4a70-9f20-49f9e7db632d.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h4><p>方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[超强大的云开发平台Coding](http://coding.net)</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/3aeea7b8-a675-4491-adbb-b64b1145ff1a.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p>在 Markdown 中，可以制作表格，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">------------ | ------------- | ------------</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/9a77d37a-95d4-4ad6-ab09-0d41f766fe34.jpg\" alt=\"在这里输入图片描述\"></p>\n<p>或者也可以让表格两边内容对齐，中间内容居中，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">:----------- | :-----------: | -----------:</span><br><span class=\"line\">Left         | Center        | Right</span><br><span class=\"line\">Left         | Center        | Right</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/0d4014c0-3f54-462a-8a99-4706c62b9e5e.jpg\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><p>在 Markdown 中，可以使用 3 个以上『-』符号制作分割线，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是分隔线上部分内容</span><br><span class=\"line\">---</span><br><span class=\"line\">这是分隔线上部分内容</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/aeb88b18-688b-41e9-a4a3-0f970ab3af3e.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: <strong>内联</strong> 和 <strong>引用</strong>.</p>\n<p><strong>内联图片语法如下</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![Alt text](/path/to/img.jpg)</span><br><span class=\"line\">或</span><br><span class=\"line\">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure>\n<p>也就是:</p>\n<ul>\n<li>一个惊叹号『!』</li>\n<li>接着一个方括号，里面是图片的替代文字</li>\n<li>接着一个普通括号，里面是图片的网址，最后还可以用引号包住并加上 选择性的『title’』文字。</li>\n</ul>\n<p><strong>引用图片语法如下</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![Alt text][id]</span><br></pre></td></tr></table></figure>\n<p>『id』 是图片引用的名称. 图片引用使用链接定义的相同语法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[id]: url/to/image &quot;Optional title attribute&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p>Markdown 编辑器已支持绘制流程图、时序图和甘特图。通过 mermaid 实现图形的插入，点击查看 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">更多语法详情</a>。</p>\n<p>​<figure class=\"highlight graph\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    A--&gt;B;</span><br><span class=\"line\">    A--&gt;C;</span><br><span class=\"line\">    B--&gt;D;</span><br><span class=\"line\">    C--&gt;E;</span><br><span class=\"line\">    E--&gt;F;</span><br><span class=\"line\">    D--&gt;F;</span><br><span class=\"line\">    F--&gt;G;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/9a6a38b8-172e-47f7-8464-b31948728149.jpg\" alt=\"img\"></p>\n<h4 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h4><p>​<figure class=\"highlight graph\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant Alice</span><br><span class=\"line\">    participant Bob</span><br><span class=\"line\">    Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">    loop Healthcheck</span><br><span class=\"line\">        John-&gt;John: Fight against hypochondria</span><br><span class=\"line\">    end</span><br><span class=\"line\">    Note right of John: Rational thoughts </span><br><span class=\"line\">prevail...</span><br><span class=\"line\">    John--&gt;Alice: Great!</span><br><span class=\"line\">    John-&gt;Bob: How about you?</span><br><span class=\"line\">    Bob--&gt;John: Jolly good!</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：<img src=\"https://dn-coding-net-production-pp.codehub.cn/65d713f4-4088-4988-8959-79ba16b1fa6e.jpg\" alt=\"img\"></p>\n<h4 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h4><p>​<figure class=\"highlight graph\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">        dateFormat  YYYY-MM-DD</span><br><span class=\"line\">        title Adding GANTT diagram functionality to mermaid</span><br><span class=\"line\">        section A section</span><br><span class=\"line\">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">        Active task               :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">        Future task               :         des3, after des2, 5d</span><br><span class=\"line\">        Future task2               :         des4, after des3, 5d</span><br><span class=\"line\">        section Critical tasks</span><br><span class=\"line\">        Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class=\"line\">        Implement parser and jison          :crit, done, after des1, 2d</span><br><span class=\"line\">        Create tests for parser             :crit, active, 3d</span><br><span class=\"line\">        Future task in critical line        :crit, 5d</span><br><span class=\"line\">        Create tests for renderer           :2d</span><br><span class=\"line\">        Add to mermaid                      :1d</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：<img src=\"https://dn-coding-net-production-pp.codehub.cn/651d802e-6409-4cf0-a3dd-b260c8d2cc60.jpg\" alt=\"img\"></p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><h5 id=\"html标签\"><a href=\"#html标签\" class=\"headerlink\" title=\"html标签\"></a>html标签</h5><p>既然Markdown内嵌html语法，那么就可以用可以用隐藏的html标签。</p>\n<p><strong>注意：需要在前面空一行</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&apos;display: none&apos;&gt;</span><br><span class=\"line\">哈哈我是注释，不会在浏览器中显示。</span><br><span class=\"line\">我也是注释。</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"html注释\"><a href=\"#html注释\" class=\"headerlink\" title=\"html注释\"></a>html注释</h5><p>既然支持html语法，那也支持html注释。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">哈哈我是多段</span><br><span class=\"line\">注释，</span><br><span class=\"line\">不会在浏览器中显示。</span><br><span class=\"line\">--&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"hack方法\"><a href=\"#hack方法\" class=\"headerlink\" title=\"hack方法\"></a>hack方法</h5><p>hack方法就是利用markdown的解析原理来实现注释的。</p>\n<p><em>一般有的markdown解析器不支持上面的注释方法，这个时候就可以用hack方法。</em></p>\n<p>hack方法比上面2种方法稳定得多，但是语义化太差。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<p>其中，这种方法最稳定，适用性最强：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<p>这种方法最可爱，超级无敌萌啊：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^_^]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<h5 id=\"示例测试\"><a href=\"#示例测试\" class=\"headerlink\" title=\"示例测试\"></a>示例测试</h5><p>1.html标签（你如果看不到下面的注释说明已经成功注释）</p>\n<div style=\"display: none\"><br>哈哈我是注释，不会在浏览器中显示。<br>我也是注释。<br></div>\n\n<p>2.html注释（你如果看不到下面的注释说明已经成功注释）</p>\n<!--哈哈我是注释，不会在浏览器中显示。-->\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n<p>3.hack注释（你如果看不到下面的注释说明已经成功注释）</p>\n<blockquote>\n<p>参考：<br>1.<a href=\"https://coding.net/help/doc/project/markdown.html\" target=\"_blank\" rel=\"noopener\">Markdown语法介绍</a><br>2.<a href=\"https://www.imooc.com/article/23400\" target=\"_blank\" rel=\"noopener\">markdown注释</a><br>3.<a href=\"https://yuhongjun.github.io/tech/2017/05/02/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C-%E5%AE%8C%E6%95%B4%E6%95%B4%E7%90%86%E7%89%88.html\" target=\"_blank\" rel=\"noopener\">Markdown 语法手册 （完整整理版）</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><em>Markdown 是一种轻量级标记语言，让写作者专注于写作而不用关注样式。Coding 的许多版块均采用了 Markdown 语法，比如冒泡、讨论、Pull Request 等。</em></strong></p>\n<h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><p>用 Markdown 书写时，只需要在文本前面加上『# 』即可创建一级标题。同理，创建二级标题、三级标题等只需要增加『# 』个数即可，Markdown 共支持六级标题。如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<p>点击预览可以看到效果：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d46c3a8f-b74a-4008-ad1d-a56be443d5fa.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h4><p>Coding 会针对每个标题，在解析时都会添加锚点 id，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 锚点</span><br></pre></td></tr></table></figure>\n<p>会被解析成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 id=&quot;user-content-锚点&quot;&gt;锚点&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>注意我们添加了一个 user-content- 的前缀，所以如果要自己添加跳转链接要使用 Markdown 的形式，且链接要加一个 user-content- 前缀，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问链接](#user-content-锚点);</span><br></pre></td></tr></table></figure>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p>Markdown 标记区块引用和 email 中用 『&gt;』的引用方式类似，只需要在整个段落的第一行最前面加上 『&gt;』 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d735ad0c-2113-48dd-ae5d-2d3b3fca6977.png\" alt=\"在这里输入图片描述\"></p>\n<p>区块引用可以嵌套，只要根据层次加上不同数量的『&gt;』：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这是第一级引用。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; &gt; 这是第二级引用。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 现在回到第一级引用。</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/db2ce6d5-5dc9-4c92-b226-50174d853eb9.png\" alt=\"在这里输入图片描述\"></p>\n<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ## 这是一个标题。</span><br><span class=\"line\">&gt; 1. 这是第一行列表项。</span><br><span class=\"line\">&gt; 2. 这是第二行列表项。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 给出一些例子代码：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; return shell_exec(`echo $input | $markdown_script`);</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/a3485b98-6e38-45f2-9c9c-fb0b5027174c.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><p>列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。</p>\n<p><strong>无序列表</strong>：使用星号、加号或是减号作为列表标记</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Red</span><br><span class=\"line\">- Green</span><br><span class=\"line\">- Blue</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d5772b14-8976-4e9f-945b-4b06d2a6e8f1.png\" alt=\"在这里输入图片描述\"></p>\n<p><strong>有序列表</strong>：使用数字接着一个英文句点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Red</span><br><span class=\"line\">2. Green</span><br><span class=\"line\">3. Blue</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/d0321f44-c344-43d4-817e-9040735cf5b3.png\" alt=\"在这里输入图片描述\"></p>\n<p>如果要在列表项目内放进引用，那『&gt;』就需要缩进：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*  Coding.net有以下主要功能:</span><br><span class=\"line\">    &gt; 代码托管平台</span><br><span class=\"line\">    &gt; 在线运行环境    </span><br><span class=\"line\">    &gt; 代码质量监控    </span><br><span class=\"line\">    &gt; 项目管理平台</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/21bfcf00-3a71-4b90-9f6e-e692dd3100a2.png\" alt=\"在这里输入图片描述\"></p>\n<p>代办列表: 表示列表是否勾选状态（注意：[ ] 前后都要有空格）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [ ] 不勾选</span><br><span class=\"line\">- [x] 勾选</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/6ff6802f-8105-4a6b-b8a4-2abc380c1107.png\" alt=\"图片\"></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>只要把你的代码块包裹在 “` 之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 Ruby 代码着色：</p>\n<p>​<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redcarpet'</span></span><br><span class=\"line\">markdown = Redcarpet.new(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">puts markdown.to_html</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/64a6b611-e0b9-443d-b7a2-c134613b63f9.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h4><p>在Markdown中，可以使用 * 和  _  来表示斜体和加粗。</p>\n<p><strong>斜体</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*Coding，让开发更简单*</span><br><span class=\"line\">_Coding，让开发更简单_</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/0e72e420-fd75-4dc8-8093-66a57e38cd68.png\" alt=\"在这里输入图片描述\"></p>\n<p><strong>加粗</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Coding，让开发更简单**</span><br><span class=\"line\">__Coding，让开发更简单__</span><br></pre></td></tr></table></figure>\n<p><em>效果图如下：</em></p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/372a6abf-f801-4a70-9f20-49f9e7db632d.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h4><p>方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[超强大的云开发平台Coding](http://coding.net)</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/3aeea7b8-a675-4491-adbb-b64b1145ff1a.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p>在 Markdown 中，可以制作表格，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">------------ | ------------- | ------------</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/9a77d37a-95d4-4ad6-ab09-0d41f766fe34.jpg\" alt=\"在这里输入图片描述\"></p>\n<p>或者也可以让表格两边内容对齐，中间内容居中，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">:----------- | :-----------: | -----------:</span><br><span class=\"line\">Left         | Center        | Right</span><br><span class=\"line\">Left         | Center        | Right</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/0d4014c0-3f54-462a-8a99-4706c62b9e5e.jpg\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><p>在 Markdown 中，可以使用 3 个以上『-』符号制作分割线，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是分隔线上部分内容</span><br><span class=\"line\">---</span><br><span class=\"line\">这是分隔线上部分内容</span><br></pre></td></tr></table></figure>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/aeb88b18-688b-41e9-a4a3-0f970ab3af3e.png\" alt=\"在这里输入图片描述\"></p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>Markdown 使用了类似链接的语法来插入图片, 包含两种形式: <strong>内联</strong> 和 <strong>引用</strong>.</p>\n<p><strong>内联图片语法如下</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![Alt text](/path/to/img.jpg)</span><br><span class=\"line\">或</span><br><span class=\"line\">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure>\n<p>也就是:</p>\n<ul>\n<li>一个惊叹号『!』</li>\n<li>接着一个方括号，里面是图片的替代文字</li>\n<li>接着一个普通括号，里面是图片的网址，最后还可以用引号包住并加上 选择性的『title’』文字。</li>\n</ul>\n<p><strong>引用图片语法如下</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![Alt text][id]</span><br></pre></td></tr></table></figure>\n<p>『id』 是图片引用的名称. 图片引用使用链接定义的相同语法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[id]: url/to/image &quot;Optional title attribute&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p>Markdown 编辑器已支持绘制流程图、时序图和甘特图。通过 mermaid 实现图形的插入，点击查看 <a href=\"https://mermaidjs.github.io/\" target=\"_blank\" rel=\"noopener\">更多语法详情</a>。</p>\n<p>​<figure class=\"highlight graph\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    A--&gt;B;</span><br><span class=\"line\">    A--&gt;C;</span><br><span class=\"line\">    B--&gt;D;</span><br><span class=\"line\">    C--&gt;E;</span><br><span class=\"line\">    E--&gt;F;</span><br><span class=\"line\">    D--&gt;F;</span><br><span class=\"line\">    F--&gt;G;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：</p>\n<p><img src=\"https://dn-coding-net-production-pp.codehub.cn/9a6a38b8-172e-47f7-8464-b31948728149.jpg\" alt=\"img\"></p>\n<h4 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h4><p>​<figure class=\"highlight graph\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant Alice</span><br><span class=\"line\">    participant Bob</span><br><span class=\"line\">    Alice-&gt;John: Hello John, how are you?</span><br><span class=\"line\">    loop Healthcheck</span><br><span class=\"line\">        John-&gt;John: Fight against hypochondria</span><br><span class=\"line\">    end</span><br><span class=\"line\">    Note right of John: Rational thoughts </span><br><span class=\"line\">prevail...</span><br><span class=\"line\">    John--&gt;Alice: Great!</span><br><span class=\"line\">    John-&gt;Bob: How about you?</span><br><span class=\"line\">    Bob--&gt;John: Jolly good!</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：<img src=\"https://dn-coding-net-production-pp.codehub.cn/65d713f4-4088-4988-8959-79ba16b1fa6e.jpg\" alt=\"img\"></p>\n<h4 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h4><p>​<figure class=\"highlight graph\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">        dateFormat  YYYY-MM-DD</span><br><span class=\"line\">        title Adding GANTT diagram functionality to mermaid</span><br><span class=\"line\">        section A section</span><br><span class=\"line\">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">        Active task               :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">        Future task               :         des3, after des2, 5d</span><br><span class=\"line\">        Future task2               :         des4, after des3, 5d</span><br><span class=\"line\">        section Critical tasks</span><br><span class=\"line\">        Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class=\"line\">        Implement parser and jison          :crit, done, after des1, 2d</span><br><span class=\"line\">        Create tests for parser             :crit, active, 3d</span><br><span class=\"line\">        Future task in critical line        :crit, 5d</span><br><span class=\"line\">        Create tests for renderer           :2d</span><br><span class=\"line\">        Add to mermaid                      :1d</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下：<img src=\"https://dn-coding-net-production-pp.codehub.cn/651d802e-6409-4cf0-a3dd-b260c8d2cc60.jpg\" alt=\"img\"></p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><h5 id=\"html标签\"><a href=\"#html标签\" class=\"headerlink\" title=\"html标签\"></a>html标签</h5><p>既然Markdown内嵌html语法，那么就可以用可以用隐藏的html标签。</p>\n<p><strong>注意：需要在前面空一行</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&apos;display: none&apos;&gt;</span><br><span class=\"line\">哈哈我是注释，不会在浏览器中显示。</span><br><span class=\"line\">我也是注释。</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"html注释\"><a href=\"#html注释\" class=\"headerlink\" title=\"html注释\"></a>html注释</h5><p>既然支持html语法，那也支持html注释。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--哈哈我是注释，不会在浏览器中显示。--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">哈哈我是多段</span><br><span class=\"line\">注释，</span><br><span class=\"line\">不会在浏览器中显示。</span><br><span class=\"line\">--&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"hack方法\"><a href=\"#hack方法\" class=\"headerlink\" title=\"hack方法\"></a>hack方法</h5><p>hack方法就是利用markdown的解析原理来实现注释的。</p>\n<p><em>一般有的markdown解析器不支持上面的注释方法，这个时候就可以用hack方法。</em></p>\n<p>hack方法比上面2种方法稳定得多，但是语义化太差。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)</span><br><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<p>其中，这种方法最稳定，适用性最强：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[//]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<p>这种方法最可爱，超级无敌萌啊：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^_^]: # (哈哈我是注释，不会在浏览器中显示。)</span><br></pre></td></tr></table></figure>\n<h5 id=\"示例测试\"><a href=\"#示例测试\" class=\"headerlink\" title=\"示例测试\"></a>示例测试</h5><p>1.html标签（你如果看不到下面的注释说明已经成功注释）</p>\n<div style=\"display: none\"><br>哈哈我是注释，不会在浏览器中显示。<br>我也是注释。<br></div>\n\n<p>2.html注释（你如果看不到下面的注释说明已经成功注释）</p>\n<!--哈哈我是注释，不会在浏览器中显示。-->\n<!--\n哈哈我是多段\n注释，\n不会在浏览器中显示。\n-->\n<p>3.hack注释（你如果看不到下面的注释说明已经成功注释）</p>\n<blockquote>\n<p>参考：<br>1.<a href=\"https://coding.net/help/doc/project/markdown.html\" target=\"_blank\" rel=\"noopener\">Markdown语法介绍</a><br>2.<a href=\"https://www.imooc.com/article/23400\" target=\"_blank\" rel=\"noopener\">markdown注释</a><br>3.<a href=\"https://yuhongjun.github.io/tech/2017/05/02/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C-%E5%AE%8C%E6%95%B4%E6%95%B4%E7%90%86%E7%89%88.html\" target=\"_blank\" rel=\"noopener\">Markdown 语法手册 （完整整理版）</a></p>\n</blockquote>\n"},{"title":"nginx服务器安装及配置文件详解(转)","date":"2019-01-08T01:14:46.000Z","_content":"\nnginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 <http://seanlook.com/2015/05/17/nginx-install-and-config> ，ssl加密请参考 <http://seanlook.com/2015/05/28/nginx-ssl/> 。\n\n# 安装nginx\n\n## 选择稳定版本\n\n我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：\n\n```\n# yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n\n这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。\n\n从 <http://nginx.org/en/download.html> 下载稳定版`nginx-1.6.3.tar.gz`到`/usr/local/src`下解压。\n\n为了后续准备我们另外下载2个插件模块：[nginx_upstream_check_module-0.3.0.tar.gz](https://github.com/yaoweibin/nginx_upstream_check_module/releases) —— 检查后端服务器的状态，[nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz](https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/downloads)（建议在/usr/local/src下解压后将目录重命名为`nginx-sticky-module-ng-1.2.5`） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考[nginx负载均衡配置实战](http://seanlook.com/2015/06/02/nginx-cache-check/)）。\n\n请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）\n\n```\n[root@cachets nginx-1.6.3]# pwd\n/usr/local/src/nginx-1.6.3\n[root@cachets nginx-1.6.3]# ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \\\n> --with-http_stub_status_module --with-http_ssl_module \\\n> --with-http_gzip_static_module --with-http_realip_module \\\n> --add-module=../nginx_upstream_check_module-0.3.0\n\n[root@cachets nginx-1.6.3]# make && make install\n```\n\n## 常用编译选项说明\n\nnginx大部分常用模块，编译时`./configure --help`以`--without`开头的都默认安装。\n\n- `--prefix=PATH` ： 指定nginx的安装目录。默认 `/usr/local/nginx`\n- `--conf-path=PATH` ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为*prefix/conf/nginx.conf*\n- `--user=name`： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。`--group=name`类似\n- `--with-pcre` ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用`--with-pcre`自动找到库文件。使用`--with-pcre=PATH`时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的`./configure`和`make`来完成。perl正则表达式使用在`location`指令和 `ngx_http_rewrite_module`模块中。\n- `--with-zlib=PATH` ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块`ngx_http_gzip_module`时需要使用zlib 。\n- `--with-http_ssl_module` ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装\n- `--with-http_stub_status_module` ： 用来监控 Nginx 的当前状态\n- `--with-http_realip_module` ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址\n- `--add-module=PATH` ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）\n\n**再提供一种编译方案**：\n\n```\n./configure \\\n> --prefix=/usr \\\n> --sbin-path=/usr/sbin/nginx \\\n> --conf-path=/etc/nginx/nginx.conf \\\n> --error-log-path=/var/log/nginx/error.log \\\n> --http-log-path=/var/log/nginx/access.log \\\n> --pid-path=/var/run/nginx/nginx.pid  \\\n> --lock-path=/var/lock/nginx.lock \\   \n> --user=nginx \\\n> --group=nginx \\\n> --with-http_ssl_module \\\n> --with-http_stub_status_module \\\n> --with-http_gzip_static_module \\\n> --http-client-body-temp-path=/var/tmp/nginx/client/ \\\n> --http-proxy-temp-path=/var/tmp/nginx/proxy/ \\\n> --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \\\n> --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\n> --with-pcre=../pcre-7.8\n> --with-zlib=../zlib-1.2.3\n```\n\n## 启动关闭nginx\n\n```\n## 检查配置文件是否正确\n# /usr/local/nginx-1.6/sbin/nginx -t \n# ./sbin/nginx -V     # 可以看到编译选项\n\n## 启动、关闭\n# ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定\n# ./sbin/nginx -s stop\n或 pkill nginx\n\n## 重启，不会改变启动时指定的配置文件\n# ./sbin/nginx -s reload\n或 kill -HUP `cat /usr/local/nginx-1.6/logs/nginx.pid`\n```\n\n当然也可以将 nginx 作为系统服务管理，下载 [nginx](http://sean-images.qiniudn.com/nginx) 到`/etc/init.d/`，修改里面的路径然后赋予可执行权限。\n\n```\n# service nginx {start|stop|status|restart|reload|configtest}\n```\n\n## yum安装\n\n—- 2015-05-22更新\nyum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。\n\n```\n# vi /etc/yum.repo.d/nginx.repo \n[nginx] \nname=nginx repo \nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/ \ngpgcheck=0 \nenabled=1\n```\n\n剩下的就`yum install nginx`搞定，也可以`yum install nginx-1.6.3`安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。\n\n# nginx.conf配置文件\n\nNginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。\n\n当前nginx支持的几个指令上下文：\n\n## 通用\n\n下面的`nginx.conf`简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：\n\n```\nuser  www www;\nworker_processes  2;\n\nerror_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\npid        logs/nginx.pid;\n\n\nevents {\n    use epoll;\n    worker_connections  2048;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    # tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n  # gzip压缩功能设置\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers    4 16k;\n    gzip_http_version 1.0;\n    gzip_comp_level 6;\n    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    gzip_vary on;\n  \n  # http_proxy 设置\n    client_max_body_size   10m;\n    client_body_buffer_size   128k;\n    proxy_connect_timeout   75;\n    proxy_send_timeout   75;\n    proxy_read_timeout   75;\n    proxy_buffer_size   4k;\n    proxy_buffers   4 32k;\n    proxy_busy_buffers_size   64k;\n    proxy_temp_file_write_size  64k;\n    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;\n\n  # 设定负载均衡后台服务器列表 \n    upstream  backend  { \n              #ip_hash; \n              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  \n              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  \n    }\n\n  # 很重要的虚拟主机配置\n    server {\n        listen       80;\n        server_name  itoatest.example.com;\n        root   /apps/oaapp;\n\n        charset utf-8;\n        access_log  logs/host.access.log  main;\n\n        #对 / 所有做负载均衡+反向代理\n        location / {\n            root   /apps/oaapp;\n            index  index.jsp index.html index.htm;\n\n            proxy_pass        http://backend;  \n            proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;  \n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n            \n        }\n\n        #静态文件，nginx自己处理，不去backend请求tomcat\n        location  ~* /download/ {  \n            root /apps/oa/fs;  \n            \n        }\n        location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$   \n        {   \n            root /apps/oaapp;   \n            expires      7d; \n        }\n       \tlocation /nginx_status {\n            stub_status on;\n            access_log off;\n            allow 192.168.10.0/24;\n            deny all;\n        }\n\n        location ~ ^/(WEB-INF)/ {   \n            deny all;   \n        }\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n  ## 其它虚拟主机，server 指令开始\n}\n```\n\n## 常用指令说明\n\n### main全局配置\n\nnginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。\n\n- `woker_processes 2`\n  在配置文件的顶级*main*部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数`grep ^processor /proc/cpuinfo | wc -l`，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。\n- `worker_cpu_affinity`\n  也是写在*main*部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如`worker_cpu_affinity 0001 0010 0100 1000;` （四核）。\n- `worker_connections 2048`\n  写在*events*部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 `最大连接数 = worker_processes * worker_connections/4`，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的`worker_rlimit_nofile`。当nginx作为http服务器时，计算公式里面是除以2。\n- `worker_rlimit_nofile 10240`\n  写在*main*部分。默认是没有设置，可以限制为操作系统最大的限制65535。\n- `use epoll`\n  写在`events`部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。\n\n### http服务器\n\n与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。\n\n- `sendfile on`\n  开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n- `keepalive_timeout 65` : 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。\n- `send_timeout` : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。\n- `client_max_body_size 10m`\n  允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值\n- `client_body_buffer_size 128k`\n  缓冲区代理缓冲用户端请求的最大字节数\n\n**模块http_proxy：**\n这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见[文章](http://seanlook.com/2015/06/02/nginx-cache-check/)）\n\n- `proxy_connect_timeout 60`\n  nginx跟后端服务器连接超时时间(代理连接超时)\n- `proxy_read_timeout 60`\n  连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)\n- `proxy_buffer_size 4k`\n  设置代理服务器（nginx）从后端realserver读取并保存用户**头**信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点\n- `proxy_buffers 4 32k`\n  proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的**响应**，网页平均在32k以下的话，这样设置\n- `proxy_busy_buffers_size 64k`\n  高负荷下缓冲大小（proxy_buffers*2）\n- `proxy_max_temp_file_size`\n  当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。\n- `proxy_temp_file_write_size 64k`\n  当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。`proxy_temp_path`（可以在编译的时候）指定写到哪那个目录。\n\nproxy_pass，proxy_redirect见 location 部分。\n\n**模块http_gzip：**\n\n- ```\n  gzip on\n  ```\n\n   \n\n  : 开启gzip压缩输出，减少网络传输。\n\n  - `gzip_min_length 1k` ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。\n  - `gzip_buffers 4 16k` ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。\n  - `gzip_http_version 1.0` ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。\n  - `gzip_comp_level 6` ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n  - `gzip_types` ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。\n  - `gzip_proxied any` ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。\n  - `gzip_vary on` ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。\n\n### server虚拟主机\n\nhttp服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。\n\n- `listen`\n  监听端口，默认80，小于1024的要以root启动。可以为`listen *:80`、`listen 127.0.0.1:80`等形式。\n- `server_name`\n  服务器名，如`localhost`、`www.example.com`，可以通过正则匹配。\n\n**模块http_stream**\n这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，`upstream`后接负载均衡器的名字，后端realserver以 `host:port options;` 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。\n\n### location\n\nhttp服务中，某些特定的URL对应的一系列配置项。\n\n- `root /var/www/html`\n  定义服务器的默认网站根目录位置。如果`location`URL匹配的是子目录或文件，`root`没什么作用，一般放在`server`指令里面或`/`下。\n- `index index.jsp index.html index.htm`\n  定义路径下默认访问的文件名，一般跟着`root`放\n- `proxy_pass http:/backend`\n  请求转向backend定义的服务器列表，即反向代理，对应`upstream`负载均衡器。也可以`proxy_passhttp://ip:port`。\n- `proxy_redirect off;`\n  `proxy_set_header Host $host;`\n  `proxy_set_header X-Real-IP $remote_addr;`\n  `proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;`\n  这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。\n\n关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 [nginx配置location总结及rewrite规则写法](http://seanlook.com/2015/05/17/nginx-location-rewrite/);\n\n## 其它\n\n### 访问控制 allow/deny\n\nNginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：\n\n```\nlocation /nginx-status {\n  stub_status on;\n  access_log off;\n#  auth_basic   \"NginxStatus\";\n#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;\n\n  allow 192.168.10.100;\n  allow 172.29.73.0/24;\n  deny all;\n}\n```\n\n我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：\n\n```\n# htpasswd -c htpasswd admin\nNew passwd:\nRe-type new password:\nAdding password for user admin\n\n# htpasswd htpasswd admin    //修改admin密码\n# htpasswd htpasswd sean    //多添加一个认证用户\n```\n\n\n\n这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。\n\n### 列出目录 autoindex\n\nNginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入`autoindex on;`，另外两个参数最好也加上去:\n\n- `autoindex_exact_size off;` 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB\n\n- ```\n  autoindex_localtime on;\n  ```\n\n  默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间\n\n  ```\n  location /images {\n    root   /var/www/nginx-default/images;\n    autoindex on;\n    autoindex_exact_size off;\n    autoindex_localtime on;\n    }\n  ```\n\n**参考**\n\n- <http://liuqunying.blog.51cto.com/3984207/1420556>\n- <http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity>\n- <http://wiki.nginx.org/HttpCoreModule#sendfile>\n- <http://seanlook.com/2015/05/17/nginx-install-and-config>","source":"_posts/nginx服务器安装及配置文件详解.md","raw":"---\ntitle: nginx服务器安装及配置文件详解(转)\ndate: 2019-01-08 09:14:46\ntags:\n---\n\nnginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 <http://seanlook.com/2015/05/17/nginx-install-and-config> ，ssl加密请参考 <http://seanlook.com/2015/05/28/nginx-ssl/> 。\n\n# 安装nginx\n\n## 选择稳定版本\n\n我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：\n\n```\n# yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n\n这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。\n\n从 <http://nginx.org/en/download.html> 下载稳定版`nginx-1.6.3.tar.gz`到`/usr/local/src`下解压。\n\n为了后续准备我们另外下载2个插件模块：[nginx_upstream_check_module-0.3.0.tar.gz](https://github.com/yaoweibin/nginx_upstream_check_module/releases) —— 检查后端服务器的状态，[nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz](https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/downloads)（建议在/usr/local/src下解压后将目录重命名为`nginx-sticky-module-ng-1.2.5`） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考[nginx负载均衡配置实战](http://seanlook.com/2015/06/02/nginx-cache-check/)）。\n\n请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）\n\n```\n[root@cachets nginx-1.6.3]# pwd\n/usr/local/src/nginx-1.6.3\n[root@cachets nginx-1.6.3]# ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \\\n> --with-http_stub_status_module --with-http_ssl_module \\\n> --with-http_gzip_static_module --with-http_realip_module \\\n> --add-module=../nginx_upstream_check_module-0.3.0\n\n[root@cachets nginx-1.6.3]# make && make install\n```\n\n## 常用编译选项说明\n\nnginx大部分常用模块，编译时`./configure --help`以`--without`开头的都默认安装。\n\n- `--prefix=PATH` ： 指定nginx的安装目录。默认 `/usr/local/nginx`\n- `--conf-path=PATH` ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为*prefix/conf/nginx.conf*\n- `--user=name`： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。`--group=name`类似\n- `--with-pcre` ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用`--with-pcre`自动找到库文件。使用`--with-pcre=PATH`时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的`./configure`和`make`来完成。perl正则表达式使用在`location`指令和 `ngx_http_rewrite_module`模块中。\n- `--with-zlib=PATH` ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块`ngx_http_gzip_module`时需要使用zlib 。\n- `--with-http_ssl_module` ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装\n- `--with-http_stub_status_module` ： 用来监控 Nginx 的当前状态\n- `--with-http_realip_module` ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址\n- `--add-module=PATH` ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）\n\n**再提供一种编译方案**：\n\n```\n./configure \\\n> --prefix=/usr \\\n> --sbin-path=/usr/sbin/nginx \\\n> --conf-path=/etc/nginx/nginx.conf \\\n> --error-log-path=/var/log/nginx/error.log \\\n> --http-log-path=/var/log/nginx/access.log \\\n> --pid-path=/var/run/nginx/nginx.pid  \\\n> --lock-path=/var/lock/nginx.lock \\   \n> --user=nginx \\\n> --group=nginx \\\n> --with-http_ssl_module \\\n> --with-http_stub_status_module \\\n> --with-http_gzip_static_module \\\n> --http-client-body-temp-path=/var/tmp/nginx/client/ \\\n> --http-proxy-temp-path=/var/tmp/nginx/proxy/ \\\n> --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \\\n> --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\n> --with-pcre=../pcre-7.8\n> --with-zlib=../zlib-1.2.3\n```\n\n## 启动关闭nginx\n\n```\n## 检查配置文件是否正确\n# /usr/local/nginx-1.6/sbin/nginx -t \n# ./sbin/nginx -V     # 可以看到编译选项\n\n## 启动、关闭\n# ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定\n# ./sbin/nginx -s stop\n或 pkill nginx\n\n## 重启，不会改变启动时指定的配置文件\n# ./sbin/nginx -s reload\n或 kill -HUP `cat /usr/local/nginx-1.6/logs/nginx.pid`\n```\n\n当然也可以将 nginx 作为系统服务管理，下载 [nginx](http://sean-images.qiniudn.com/nginx) 到`/etc/init.d/`，修改里面的路径然后赋予可执行权限。\n\n```\n# service nginx {start|stop|status|restart|reload|configtest}\n```\n\n## yum安装\n\n—- 2015-05-22更新\nyum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。\n\n```\n# vi /etc/yum.repo.d/nginx.repo \n[nginx] \nname=nginx repo \nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/ \ngpgcheck=0 \nenabled=1\n```\n\n剩下的就`yum install nginx`搞定，也可以`yum install nginx-1.6.3`安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。\n\n# nginx.conf配置文件\n\nNginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。\n\n当前nginx支持的几个指令上下文：\n\n## 通用\n\n下面的`nginx.conf`简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：\n\n```\nuser  www www;\nworker_processes  2;\n\nerror_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\npid        logs/nginx.pid;\n\n\nevents {\n    use epoll;\n    worker_connections  2048;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    # tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n  # gzip压缩功能设置\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers    4 16k;\n    gzip_http_version 1.0;\n    gzip_comp_level 6;\n    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    gzip_vary on;\n  \n  # http_proxy 设置\n    client_max_body_size   10m;\n    client_body_buffer_size   128k;\n    proxy_connect_timeout   75;\n    proxy_send_timeout   75;\n    proxy_read_timeout   75;\n    proxy_buffer_size   4k;\n    proxy_buffers   4 32k;\n    proxy_busy_buffers_size   64k;\n    proxy_temp_file_write_size  64k;\n    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;\n\n  # 设定负载均衡后台服务器列表 \n    upstream  backend  { \n              #ip_hash; \n              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  \n              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  \n    }\n\n  # 很重要的虚拟主机配置\n    server {\n        listen       80;\n        server_name  itoatest.example.com;\n        root   /apps/oaapp;\n\n        charset utf-8;\n        access_log  logs/host.access.log  main;\n\n        #对 / 所有做负载均衡+反向代理\n        location / {\n            root   /apps/oaapp;\n            index  index.jsp index.html index.htm;\n\n            proxy_pass        http://backend;  \n            proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;  \n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n            \n        }\n\n        #静态文件，nginx自己处理，不去backend请求tomcat\n        location  ~* /download/ {  \n            root /apps/oa/fs;  \n            \n        }\n        location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$   \n        {   \n            root /apps/oaapp;   \n            expires      7d; \n        }\n       \tlocation /nginx_status {\n            stub_status on;\n            access_log off;\n            allow 192.168.10.0/24;\n            deny all;\n        }\n\n        location ~ ^/(WEB-INF)/ {   \n            deny all;   \n        }\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n  ## 其它虚拟主机，server 指令开始\n}\n```\n\n## 常用指令说明\n\n### main全局配置\n\nnginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。\n\n- `woker_processes 2`\n  在配置文件的顶级*main*部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数`grep ^processor /proc/cpuinfo | wc -l`，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。\n- `worker_cpu_affinity`\n  也是写在*main*部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如`worker_cpu_affinity 0001 0010 0100 1000;` （四核）。\n- `worker_connections 2048`\n  写在*events*部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 `最大连接数 = worker_processes * worker_connections/4`，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的`worker_rlimit_nofile`。当nginx作为http服务器时，计算公式里面是除以2。\n- `worker_rlimit_nofile 10240`\n  写在*main*部分。默认是没有设置，可以限制为操作系统最大的限制65535。\n- `use epoll`\n  写在`events`部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。\n\n### http服务器\n\n与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。\n\n- `sendfile on`\n  开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n- `keepalive_timeout 65` : 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。\n- `send_timeout` : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。\n- `client_max_body_size 10m`\n  允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值\n- `client_body_buffer_size 128k`\n  缓冲区代理缓冲用户端请求的最大字节数\n\n**模块http_proxy：**\n这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见[文章](http://seanlook.com/2015/06/02/nginx-cache-check/)）\n\n- `proxy_connect_timeout 60`\n  nginx跟后端服务器连接超时时间(代理连接超时)\n- `proxy_read_timeout 60`\n  连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)\n- `proxy_buffer_size 4k`\n  设置代理服务器（nginx）从后端realserver读取并保存用户**头**信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点\n- `proxy_buffers 4 32k`\n  proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的**响应**，网页平均在32k以下的话，这样设置\n- `proxy_busy_buffers_size 64k`\n  高负荷下缓冲大小（proxy_buffers*2）\n- `proxy_max_temp_file_size`\n  当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。\n- `proxy_temp_file_write_size 64k`\n  当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。`proxy_temp_path`（可以在编译的时候）指定写到哪那个目录。\n\nproxy_pass，proxy_redirect见 location 部分。\n\n**模块http_gzip：**\n\n- ```\n  gzip on\n  ```\n\n   \n\n  : 开启gzip压缩输出，减少网络传输。\n\n  - `gzip_min_length 1k` ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。\n  - `gzip_buffers 4 16k` ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。\n  - `gzip_http_version 1.0` ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。\n  - `gzip_comp_level 6` ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n  - `gzip_types` ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。\n  - `gzip_proxied any` ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。\n  - `gzip_vary on` ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。\n\n### server虚拟主机\n\nhttp服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。\n\n- `listen`\n  监听端口，默认80，小于1024的要以root启动。可以为`listen *:80`、`listen 127.0.0.1:80`等形式。\n- `server_name`\n  服务器名，如`localhost`、`www.example.com`，可以通过正则匹配。\n\n**模块http_stream**\n这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，`upstream`后接负载均衡器的名字，后端realserver以 `host:port options;` 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。\n\n### location\n\nhttp服务中，某些特定的URL对应的一系列配置项。\n\n- `root /var/www/html`\n  定义服务器的默认网站根目录位置。如果`location`URL匹配的是子目录或文件，`root`没什么作用，一般放在`server`指令里面或`/`下。\n- `index index.jsp index.html index.htm`\n  定义路径下默认访问的文件名，一般跟着`root`放\n- `proxy_pass http:/backend`\n  请求转向backend定义的服务器列表，即反向代理，对应`upstream`负载均衡器。也可以`proxy_passhttp://ip:port`。\n- `proxy_redirect off;`\n  `proxy_set_header Host $host;`\n  `proxy_set_header X-Real-IP $remote_addr;`\n  `proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;`\n  这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。\n\n关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 [nginx配置location总结及rewrite规则写法](http://seanlook.com/2015/05/17/nginx-location-rewrite/);\n\n## 其它\n\n### 访问控制 allow/deny\n\nNginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：\n\n```\nlocation /nginx-status {\n  stub_status on;\n  access_log off;\n#  auth_basic   \"NginxStatus\";\n#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;\n\n  allow 192.168.10.100;\n  allow 172.29.73.0/24;\n  deny all;\n}\n```\n\n我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：\n\n```\n# htpasswd -c htpasswd admin\nNew passwd:\nRe-type new password:\nAdding password for user admin\n\n# htpasswd htpasswd admin    //修改admin密码\n# htpasswd htpasswd sean    //多添加一个认证用户\n```\n\n\n\n这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。\n\n### 列出目录 autoindex\n\nNginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入`autoindex on;`，另外两个参数最好也加上去:\n\n- `autoindex_exact_size off;` 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB\n\n- ```\n  autoindex_localtime on;\n  ```\n\n  默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间\n\n  ```\n  location /images {\n    root   /var/www/nginx-default/images;\n    autoindex on;\n    autoindex_exact_size off;\n    autoindex_localtime on;\n    }\n  ```\n\n**参考**\n\n- <http://liuqunying.blog.51cto.com/3984207/1420556>\n- <http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity>\n- <http://wiki.nginx.org/HttpCoreModule#sendfile>\n- <http://seanlook.com/2015/05/17/nginx-install-and-config>","slug":"nginx服务器安装及配置文件详解","published":1,"updated":"2019-01-08T01:28:05.140Z","_id":"cjqn2g2kd0001kaauy6xp1a5m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 <a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config\" target=\"_blank\" rel=\"noopener\">http://seanlook.com/2015/05/17/nginx-install-and-config</a> ，ssl加密请参考 <a href=\"http://seanlook.com/2015/05/28/nginx-ssl/\" target=\"_blank\" rel=\"noopener\">http://seanlook.com/2015/05/28/nginx-ssl/</a> 。</p>\n<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><h2 id=\"选择稳定版本\"><a href=\"#选择稳定版本\" class=\"headerlink\" title=\"选择稳定版本\"></a>选择稳定版本</h2><p>我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<p>这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。</p>\n<p>从 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a> 下载稳定版<code>nginx-1.6.3.tar.gz</code>到<code>/usr/local/src</code>下解压。</p>\n<p>为了后续准备我们另外下载2个插件模块：<a href=\"https://github.com/yaoweibin/nginx_upstream_check_module/releases\" target=\"_blank\" rel=\"noopener\">nginx_upstream_check_module-0.3.0.tar.gz</a> —— 检查后端服务器的状态，<a href=\"https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/downloads\" target=\"_blank\" rel=\"noopener\">nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz</a>（建议在/usr/local/src下解压后将目录重命名为<code>nginx-sticky-module-ng-1.2.5</code>） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考<a href=\"http://seanlook.com/2015/06/02/nginx-cache-check/\" target=\"_blank\" rel=\"noopener\">nginx负载均衡配置实战</a>）。</p>\n<p>请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@cachets nginx-1.6.3]# pwd</span><br><span class=\"line\">/usr/local/src/nginx-1.6.3</span><br><span class=\"line\">[root@cachets nginx-1.6.3]# ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \\</span><br><span class=\"line\">&gt; --with-http_stub_status_module --with-http_ssl_module \\</span><br><span class=\"line\">&gt; --with-http_gzip_static_module --with-http_realip_module \\</span><br><span class=\"line\">&gt; --add-module=../nginx_upstream_check_module-0.3.0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@cachets nginx-1.6.3]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用编译选项说明\"><a href=\"#常用编译选项说明\" class=\"headerlink\" title=\"常用编译选项说明\"></a>常用编译选项说明</h2><p>nginx大部分常用模块，编译时<code>./configure --help</code>以<code>--without</code>开头的都默认安装。</p>\n<ul>\n<li><code>--prefix=PATH</code> ： 指定nginx的安装目录。默认 <code>/usr/local/nginx</code></li>\n<li><code>--conf-path=PATH</code> ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为<em>prefix/conf/nginx.conf</em></li>\n<li><code>--user=name</code>： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。<code>--group=name</code>类似</li>\n<li><code>--with-pcre</code> ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用<code>--with-pcre</code>自动找到库文件。使用<code>--with-pcre=PATH</code>时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的<code>./configure</code>和<code>make</code>来完成。perl正则表达式使用在<code>location</code>指令和 <code>ngx_http_rewrite_module</code>模块中。</li>\n<li><code>--with-zlib=PATH</code> ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块<code>ngx_http_gzip_module</code>时需要使用zlib 。</li>\n<li><code>--with-http_ssl_module</code> ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装</li>\n<li><code>--with-http_stub_status_module</code> ： 用来监控 Nginx 的当前状态</li>\n<li><code>--with-http_realip_module</code> ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址</li>\n<li><code>--add-module=PATH</code> ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）</li>\n</ul>\n<p><strong>再提供一种编译方案</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">&gt; --prefix=/usr \\</span><br><span class=\"line\">&gt; --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">&gt; --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">&gt; --error-log-path=/var/log/nginx/error.log \\</span><br><span class=\"line\">&gt; --http-log-path=/var/log/nginx/access.log \\</span><br><span class=\"line\">&gt; --pid-path=/var/run/nginx/nginx.pid  \\</span><br><span class=\"line\">&gt; --lock-path=/var/lock/nginx.lock \\   </span><br><span class=\"line\">&gt; --user=nginx \\</span><br><span class=\"line\">&gt; --group=nginx \\</span><br><span class=\"line\">&gt; --with-http_ssl_module \\</span><br><span class=\"line\">&gt; --with-http_stub_status_module \\</span><br><span class=\"line\">&gt; --with-http_gzip_static_module \\</span><br><span class=\"line\">&gt; --http-client-body-temp-path=/var/tmp/nginx/client/ \\</span><br><span class=\"line\">&gt; --http-proxy-temp-path=/var/tmp/nginx/proxy/ \\</span><br><span class=\"line\">&gt; --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \\</span><br><span class=\"line\">&gt; --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\</span><br><span class=\"line\">&gt; --with-pcre=../pcre-7.8</span><br><span class=\"line\">&gt; --with-zlib=../zlib-1.2.3</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动关闭nginx\"><a href=\"#启动关闭nginx\" class=\"headerlink\" title=\"启动关闭nginx\"></a>启动关闭nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 检查配置文件是否正确</span><br><span class=\"line\"># /usr/local/nginx-1.6/sbin/nginx -t </span><br><span class=\"line\"># ./sbin/nginx -V     # 可以看到编译选项</span><br><span class=\"line\"></span><br><span class=\"line\">## 启动、关闭</span><br><span class=\"line\"># ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定</span><br><span class=\"line\"># ./sbin/nginx -s stop</span><br><span class=\"line\">或 pkill nginx</span><br><span class=\"line\"></span><br><span class=\"line\">## 重启，不会改变启动时指定的配置文件</span><br><span class=\"line\"># ./sbin/nginx -s reload</span><br><span class=\"line\">或 kill -HUP `cat /usr/local/nginx-1.6/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n<p>当然也可以将 nginx 作为系统服务管理，下载 <a href=\"http://sean-images.qiniudn.com/nginx\" target=\"_blank\" rel=\"noopener\">nginx</a> 到<code>/etc/init.d/</code>，修改里面的路径然后赋予可执行权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service nginx &#123;start|stop|status|restart|reload|configtest&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h2><p>—- 2015-05-22更新<br>yum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi /etc/yum.repo.d/nginx.repo </span><br><span class=\"line\">[nginx] </span><br><span class=\"line\">name=nginx repo </span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ </span><br><span class=\"line\">gpgcheck=0 </span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p>剩下的就<code>yum install nginx</code>搞定，也可以<code>yum install nginx-1.6.3</code>安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。</p>\n<h1 id=\"nginx-conf配置文件\"><a href=\"#nginx-conf配置文件\" class=\"headerlink\" title=\"nginx.conf配置文件\"></a>nginx.conf配置文件</h1><p>Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>\n<p>当前nginx支持的几个指令上下文：</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><p>下面的<code>nginx.conf</code>简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  www www;</span><br><span class=\"line\">worker_processes  2;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    worker_connections  2048;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    # tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">  # gzip压缩功能设置</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers    4 16k;</span><br><span class=\"line\">    gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">  </span><br><span class=\"line\">  # http_proxy 设置</span><br><span class=\"line\">    client_max_body_size   10m;</span><br><span class=\"line\">    client_body_buffer_size   128k;</span><br><span class=\"line\">    proxy_connect_timeout   75;</span><br><span class=\"line\">    proxy_send_timeout   75;</span><br><span class=\"line\">    proxy_read_timeout   75;</span><br><span class=\"line\">    proxy_buffer_size   4k;</span><br><span class=\"line\">    proxy_buffers   4 32k;</span><br><span class=\"line\">    proxy_busy_buffers_size   64k;</span><br><span class=\"line\">    proxy_temp_file_write_size  64k;</span><br><span class=\"line\">    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设定负载均衡后台服务器列表 </span><br><span class=\"line\">    upstream  backend  &#123; </span><br><span class=\"line\">              #ip_hash; </span><br><span class=\"line\">              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 很重要的虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  itoatest.example.com;</span><br><span class=\"line\">        root   /apps/oaapp;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对 / 所有做负载均衡+反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /apps/oaapp;</span><br><span class=\"line\">            index  index.jsp index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">            proxy_pass        http://backend;  </span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header  Host  $host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;  </span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #静态文件，nginx自己处理，不去backend请求tomcat</span><br><span class=\"line\">        location  ~* /download/ &#123;  </span><br><span class=\"line\">            root /apps/oa/fs;  </span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$   </span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            root /apps/oaapp;   </span><br><span class=\"line\">            expires      7d; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       \tlocation /nginx_status &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">            allow 192.168.10.0/24;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ ^/(WEB-INF)/ &#123;   </span><br><span class=\"line\">            deny all;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## 其它虚拟主机，server 指令开始</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令说明\"><a href=\"#常用指令说明\" class=\"headerlink\" title=\"常用指令说明\"></a>常用指令说明</h2><h3 id=\"main全局配置\"><a href=\"#main全局配置\" class=\"headerlink\" title=\"main全局配置\"></a>main全局配置</h3><p>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</p>\n<ul>\n<li><code>woker_processes 2</code><br>在配置文件的顶级<em>main</em>部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数<code>grep ^processor /proc/cpuinfo | wc -l</code>，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</li>\n<li><code>worker_cpu_affinity</code><br>也是写在<em>main</em>部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如<code>worker_cpu_affinity 0001 0010 0100 1000;</code> （四核）。</li>\n<li><code>worker_connections 2048</code><br>写在<em>events</em>部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 <code>最大连接数 = worker_processes * worker_connections/4</code>，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的<code>worker_rlimit_nofile</code>。当nginx作为http服务器时，计算公式里面是除以2。</li>\n<li><code>worker_rlimit_nofile 10240</code><br>写在<em>main</em>部分。默认是没有设置，可以限制为操作系统最大的限制65535。</li>\n<li><code>use epoll</code><br>写在<code>events</code>部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</li>\n</ul>\n<h3 id=\"http服务器\"><a href=\"#http服务器\" class=\"headerlink\" title=\"http服务器\"></a>http服务器</h3><p>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</p>\n<ul>\n<li><code>sendfile on</code><br>开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</li>\n<li><code>keepalive_timeout 65</code> : 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</li>\n<li><code>send_timeout</code> : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li>\n<li><code>client_max_body_size 10m</code><br>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</li>\n<li><code>client_body_buffer_size 128k</code><br>缓冲区代理缓冲用户端请求的最大字节数</li>\n</ul>\n<p><strong>模块http_proxy：</strong><br>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见<a href=\"http://seanlook.com/2015/06/02/nginx-cache-check/\" target=\"_blank\" rel=\"noopener\">文章</a>）</p>\n<ul>\n<li><code>proxy_connect_timeout 60</code><br>nginx跟后端服务器连接超时时间(代理连接超时)</li>\n<li><code>proxy_read_timeout 60</code><br>连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</li>\n<li><code>proxy_buffer_size 4k</code><br>设置代理服务器（nginx）从后端realserver读取并保存用户<strong>头</strong>信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</li>\n<li><code>proxy_buffers 4 32k</code><br>proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的<strong>响应</strong>，网页平均在32k以下的话，这样设置</li>\n<li><code>proxy_busy_buffers_size 64k</code><br>高负荷下缓冲大小（proxy_buffers*2）</li>\n<li><code>proxy_max_temp_file_size</code><br>当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</li>\n<li><code>proxy_temp_file_write_size 64k</code><br>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。<code>proxy_temp_path</code>（可以在编译的时候）指定写到哪那个目录。</li>\n</ul>\n<p>proxy_pass，proxy_redirect见 location 部分。</p>\n<p><strong>模块http_gzip：</strong></p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  : 开启gzip压缩输出，减少网络传输。</p>\n<ul>\n<li><code>gzip_min_length 1k</code> ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li>\n<li><code>gzip_buffers 4 16k</code> ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li>\n<li><code>gzip_http_version 1.0</code> ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li>\n<li><code>gzip_comp_level 6</code> ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li>\n<li><code>gzip_types</code> ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li>\n<li><code>gzip_proxied any</code> ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li>\n<li><code>gzip_vary on</code> ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</li>\n</ul>\n<h3 id=\"server虚拟主机\"><a href=\"#server虚拟主机\" class=\"headerlink\" title=\"server虚拟主机\"></a>server虚拟主机</h3><p>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</p>\n<ul>\n<li><code>listen</code><br>监听端口，默认80，小于1024的要以root启动。可以为<code>listen *:80</code>、<code>listen 127.0.0.1:80</code>等形式。</li>\n<li><code>server_name</code><br>服务器名，如<code>localhost</code>、<code>www.example.com</code>，可以通过正则匹配。</li>\n</ul>\n<p><strong>模块http_stream</strong><br>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，<code>upstream</code>后接负载均衡器的名字，后端realserver以 <code>host:port options;</code> 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p>http服务中，某些特定的URL对应的一系列配置项。</p>\n<ul>\n<li><code>root /var/www/html</code><br>定义服务器的默认网站根目录位置。如果<code>location</code>URL匹配的是子目录或文件，<code>root</code>没什么作用，一般放在<code>server</code>指令里面或<code>/</code>下。</li>\n<li><code>index index.jsp index.html index.htm</code><br>定义路径下默认访问的文件名，一般跟着<code>root</code>放</li>\n<li><code>proxy_pass http:/backend</code><br>请求转向backend定义的服务器列表，即反向代理，对应<code>upstream</code>负载均衡器。也可以<code>proxy_passhttp://ip:port</code>。</li>\n<li><code>proxy_redirect off;</code><br><code>proxy_set_header Host $host;</code><br><code>proxy_set_header X-Real-IP $remote_addr;</code><br><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code><br>这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。</li>\n</ul>\n<p>关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 <a href=\"http://seanlook.com/2015/05/17/nginx-location-rewrite/\" target=\"_blank\" rel=\"noopener\">nginx配置location总结及rewrite规则写法</a>;</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"访问控制-allow-deny\"><a href=\"#访问控制-allow-deny\" class=\"headerlink\" title=\"访问控制 allow/deny\"></a>访问控制 allow/deny</h3><p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /nginx-status &#123;</span><br><span class=\"line\">  stub_status on;</span><br><span class=\"line\">  access_log off;</span><br><span class=\"line\">#  auth_basic   &quot;NginxStatus&quot;;</span><br><span class=\"line\">#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;</span><br><span class=\"line\"></span><br><span class=\"line\">  allow 192.168.10.100;</span><br><span class=\"line\">  allow 172.29.73.0/24;</span><br><span class=\"line\">  deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># htpasswd -c htpasswd admin</span><br><span class=\"line\">New passwd:</span><br><span class=\"line\">Re-type new password:</span><br><span class=\"line\">Adding password for user admin</span><br><span class=\"line\"></span><br><span class=\"line\"># htpasswd htpasswd admin    //修改admin密码</span><br><span class=\"line\"># htpasswd htpasswd sean    //多添加一个认证用户</span><br></pre></td></tr></table></figure>\n<p>这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。</p>\n<h3 id=\"列出目录-autoindex\"><a href=\"#列出目录-autoindex\" class=\"headerlink\" title=\"列出目录 autoindex\"></a>列出目录 autoindex</h3><p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入<code>autoindex on;</code>，另外两个参数最好也加上去:</p>\n<ul>\n<li><p><code>autoindex_exact_size off;</code> 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autoindex_localtime on;</span><br></pre></td></tr></table></figure>\n<p>默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /images &#123;</span><br><span class=\"line\">  root   /var/www/nginx-default/images;</span><br><span class=\"line\">  autoindex on;</span><br><span class=\"line\">  autoindex_exact_size off;</span><br><span class=\"line\">  autoindex_localtime on;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"http://liuqunying.blog.51cto.com/3984207/1420556\" target=\"_blank\" rel=\"noopener\">http://liuqunying.blog.51cto.com/3984207/1420556</a></li>\n<li><a href=\"http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity</a></li>\n<li><a href=\"http://wiki.nginx.org/HttpCoreModule#sendfile\" target=\"_blank\" rel=\"noopener\">http://wiki.nginx.org/HttpCoreModule#sendfile</a></li>\n<li><a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config\" target=\"_blank\" rel=\"noopener\">http://seanlook.com/2015/05/17/nginx-install-and-config</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 <a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config\" target=\"_blank\" rel=\"noopener\">http://seanlook.com/2015/05/17/nginx-install-and-config</a> ，ssl加密请参考 <a href=\"http://seanlook.com/2015/05/28/nginx-ssl/\" target=\"_blank\" rel=\"noopener\">http://seanlook.com/2015/05/28/nginx-ssl/</a> 。</p>\n<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><h2 id=\"选择稳定版本\"><a href=\"#选择稳定版本\" class=\"headerlink\" title=\"选择稳定版本\"></a>选择稳定版本</h2><p>我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<p>这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。</p>\n<p>从 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a> 下载稳定版<code>nginx-1.6.3.tar.gz</code>到<code>/usr/local/src</code>下解压。</p>\n<p>为了后续准备我们另外下载2个插件模块：<a href=\"https://github.com/yaoweibin/nginx_upstream_check_module/releases\" target=\"_blank\" rel=\"noopener\">nginx_upstream_check_module-0.3.0.tar.gz</a> —— 检查后端服务器的状态，<a href=\"https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/downloads\" target=\"_blank\" rel=\"noopener\">nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz</a>（建议在/usr/local/src下解压后将目录重命名为<code>nginx-sticky-module-ng-1.2.5</code>） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考<a href=\"http://seanlook.com/2015/06/02/nginx-cache-check/\" target=\"_blank\" rel=\"noopener\">nginx负载均衡配置实战</a>）。</p>\n<p>请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@cachets nginx-1.6.3]# pwd</span><br><span class=\"line\">/usr/local/src/nginx-1.6.3</span><br><span class=\"line\">[root@cachets nginx-1.6.3]# ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \\</span><br><span class=\"line\">&gt; --with-http_stub_status_module --with-http_ssl_module \\</span><br><span class=\"line\">&gt; --with-http_gzip_static_module --with-http_realip_module \\</span><br><span class=\"line\">&gt; --add-module=../nginx_upstream_check_module-0.3.0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@cachets nginx-1.6.3]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用编译选项说明\"><a href=\"#常用编译选项说明\" class=\"headerlink\" title=\"常用编译选项说明\"></a>常用编译选项说明</h2><p>nginx大部分常用模块，编译时<code>./configure --help</code>以<code>--without</code>开头的都默认安装。</p>\n<ul>\n<li><code>--prefix=PATH</code> ： 指定nginx的安装目录。默认 <code>/usr/local/nginx</code></li>\n<li><code>--conf-path=PATH</code> ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为<em>prefix/conf/nginx.conf</em></li>\n<li><code>--user=name</code>： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。<code>--group=name</code>类似</li>\n<li><code>--with-pcre</code> ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用<code>--with-pcre</code>自动找到库文件。使用<code>--with-pcre=PATH</code>时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的<code>./configure</code>和<code>make</code>来完成。perl正则表达式使用在<code>location</code>指令和 <code>ngx_http_rewrite_module</code>模块中。</li>\n<li><code>--with-zlib=PATH</code> ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块<code>ngx_http_gzip_module</code>时需要使用zlib 。</li>\n<li><code>--with-http_ssl_module</code> ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装</li>\n<li><code>--with-http_stub_status_module</code> ： 用来监控 Nginx 的当前状态</li>\n<li><code>--with-http_realip_module</code> ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址</li>\n<li><code>--add-module=PATH</code> ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）</li>\n</ul>\n<p><strong>再提供一种编译方案</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">&gt; --prefix=/usr \\</span><br><span class=\"line\">&gt; --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">&gt; --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">&gt; --error-log-path=/var/log/nginx/error.log \\</span><br><span class=\"line\">&gt; --http-log-path=/var/log/nginx/access.log \\</span><br><span class=\"line\">&gt; --pid-path=/var/run/nginx/nginx.pid  \\</span><br><span class=\"line\">&gt; --lock-path=/var/lock/nginx.lock \\   </span><br><span class=\"line\">&gt; --user=nginx \\</span><br><span class=\"line\">&gt; --group=nginx \\</span><br><span class=\"line\">&gt; --with-http_ssl_module \\</span><br><span class=\"line\">&gt; --with-http_stub_status_module \\</span><br><span class=\"line\">&gt; --with-http_gzip_static_module \\</span><br><span class=\"line\">&gt; --http-client-body-temp-path=/var/tmp/nginx/client/ \\</span><br><span class=\"line\">&gt; --http-proxy-temp-path=/var/tmp/nginx/proxy/ \\</span><br><span class=\"line\">&gt; --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \\</span><br><span class=\"line\">&gt; --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\</span><br><span class=\"line\">&gt; --with-pcre=../pcre-7.8</span><br><span class=\"line\">&gt; --with-zlib=../zlib-1.2.3</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动关闭nginx\"><a href=\"#启动关闭nginx\" class=\"headerlink\" title=\"启动关闭nginx\"></a>启动关闭nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 检查配置文件是否正确</span><br><span class=\"line\"># /usr/local/nginx-1.6/sbin/nginx -t </span><br><span class=\"line\"># ./sbin/nginx -V     # 可以看到编译选项</span><br><span class=\"line\"></span><br><span class=\"line\">## 启动、关闭</span><br><span class=\"line\"># ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定</span><br><span class=\"line\"># ./sbin/nginx -s stop</span><br><span class=\"line\">或 pkill nginx</span><br><span class=\"line\"></span><br><span class=\"line\">## 重启，不会改变启动时指定的配置文件</span><br><span class=\"line\"># ./sbin/nginx -s reload</span><br><span class=\"line\">或 kill -HUP `cat /usr/local/nginx-1.6/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n<p>当然也可以将 nginx 作为系统服务管理，下载 <a href=\"http://sean-images.qiniudn.com/nginx\" target=\"_blank\" rel=\"noopener\">nginx</a> 到<code>/etc/init.d/</code>，修改里面的路径然后赋予可执行权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service nginx &#123;start|stop|status|restart|reload|configtest&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h2><p>—- 2015-05-22更新<br>yum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi /etc/yum.repo.d/nginx.repo </span><br><span class=\"line\">[nginx] </span><br><span class=\"line\">name=nginx repo </span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ </span><br><span class=\"line\">gpgcheck=0 </span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p>剩下的就<code>yum install nginx</code>搞定，也可以<code>yum install nginx-1.6.3</code>安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。</p>\n<h1 id=\"nginx-conf配置文件\"><a href=\"#nginx-conf配置文件\" class=\"headerlink\" title=\"nginx.conf配置文件\"></a>nginx.conf配置文件</h1><p>Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>\n<p>当前nginx支持的几个指令上下文：</p>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><p>下面的<code>nginx.conf</code>简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  www www;</span><br><span class=\"line\">worker_processes  2;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    worker_connections  2048;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    # tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">  # gzip压缩功能设置</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers    4 16k;</span><br><span class=\"line\">    gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">  </span><br><span class=\"line\">  # http_proxy 设置</span><br><span class=\"line\">    client_max_body_size   10m;</span><br><span class=\"line\">    client_body_buffer_size   128k;</span><br><span class=\"line\">    proxy_connect_timeout   75;</span><br><span class=\"line\">    proxy_send_timeout   75;</span><br><span class=\"line\">    proxy_read_timeout   75;</span><br><span class=\"line\">    proxy_buffer_size   4k;</span><br><span class=\"line\">    proxy_buffers   4 32k;</span><br><span class=\"line\">    proxy_busy_buffers_size   64k;</span><br><span class=\"line\">    proxy_temp_file_write_size  64k;</span><br><span class=\"line\">    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设定负载均衡后台服务器列表 </span><br><span class=\"line\">    upstream  backend  &#123; </span><br><span class=\"line\">              #ip_hash; </span><br><span class=\"line\">              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 很重要的虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  itoatest.example.com;</span><br><span class=\"line\">        root   /apps/oaapp;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对 / 所有做负载均衡+反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /apps/oaapp;</span><br><span class=\"line\">            index  index.jsp index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">            proxy_pass        http://backend;  </span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header  Host  $host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;  </span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #静态文件，nginx自己处理，不去backend请求tomcat</span><br><span class=\"line\">        location  ~* /download/ &#123;  </span><br><span class=\"line\">            root /apps/oa/fs;  </span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$   </span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            root /apps/oaapp;   </span><br><span class=\"line\">            expires      7d; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       \tlocation /nginx_status &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">            allow 192.168.10.0/24;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ ^/(WEB-INF)/ &#123;   </span><br><span class=\"line\">            deny all;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## 其它虚拟主机，server 指令开始</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用指令说明\"><a href=\"#常用指令说明\" class=\"headerlink\" title=\"常用指令说明\"></a>常用指令说明</h2><h3 id=\"main全局配置\"><a href=\"#main全局配置\" class=\"headerlink\" title=\"main全局配置\"></a>main全局配置</h3><p>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</p>\n<ul>\n<li><code>woker_processes 2</code><br>在配置文件的顶级<em>main</em>部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数<code>grep ^processor /proc/cpuinfo | wc -l</code>，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</li>\n<li><code>worker_cpu_affinity</code><br>也是写在<em>main</em>部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如<code>worker_cpu_affinity 0001 0010 0100 1000;</code> （四核）。</li>\n<li><code>worker_connections 2048</code><br>写在<em>events</em>部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 <code>最大连接数 = worker_processes * worker_connections/4</code>，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的<code>worker_rlimit_nofile</code>。当nginx作为http服务器时，计算公式里面是除以2。</li>\n<li><code>worker_rlimit_nofile 10240</code><br>写在<em>main</em>部分。默认是没有设置，可以限制为操作系统最大的限制65535。</li>\n<li><code>use epoll</code><br>写在<code>events</code>部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</li>\n</ul>\n<h3 id=\"http服务器\"><a href=\"#http服务器\" class=\"headerlink\" title=\"http服务器\"></a>http服务器</h3><p>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</p>\n<ul>\n<li><code>sendfile on</code><br>开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</li>\n<li><code>keepalive_timeout 65</code> : 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</li>\n<li><code>send_timeout</code> : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li>\n<li><code>client_max_body_size 10m</code><br>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</li>\n<li><code>client_body_buffer_size 128k</code><br>缓冲区代理缓冲用户端请求的最大字节数</li>\n</ul>\n<p><strong>模块http_proxy：</strong><br>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见<a href=\"http://seanlook.com/2015/06/02/nginx-cache-check/\" target=\"_blank\" rel=\"noopener\">文章</a>）</p>\n<ul>\n<li><code>proxy_connect_timeout 60</code><br>nginx跟后端服务器连接超时时间(代理连接超时)</li>\n<li><code>proxy_read_timeout 60</code><br>连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</li>\n<li><code>proxy_buffer_size 4k</code><br>设置代理服务器（nginx）从后端realserver读取并保存用户<strong>头</strong>信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</li>\n<li><code>proxy_buffers 4 32k</code><br>proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的<strong>响应</strong>，网页平均在32k以下的话，这样设置</li>\n<li><code>proxy_busy_buffers_size 64k</code><br>高负荷下缓冲大小（proxy_buffers*2）</li>\n<li><code>proxy_max_temp_file_size</code><br>当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</li>\n<li><code>proxy_temp_file_write_size 64k</code><br>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。<code>proxy_temp_path</code>（可以在编译的时候）指定写到哪那个目录。</li>\n</ul>\n<p>proxy_pass，proxy_redirect见 location 部分。</p>\n<p><strong>模块http_gzip：</strong></p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>  : 开启gzip压缩输出，减少网络传输。</p>\n<ul>\n<li><code>gzip_min_length 1k</code> ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li>\n<li><code>gzip_buffers 4 16k</code> ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li>\n<li><code>gzip_http_version 1.0</code> ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li>\n<li><code>gzip_comp_level 6</code> ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li>\n<li><code>gzip_types</code> ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li>\n<li><code>gzip_proxied any</code> ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li>\n<li><code>gzip_vary on</code> ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</li>\n</ul>\n<h3 id=\"server虚拟主机\"><a href=\"#server虚拟主机\" class=\"headerlink\" title=\"server虚拟主机\"></a>server虚拟主机</h3><p>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</p>\n<ul>\n<li><code>listen</code><br>监听端口，默认80，小于1024的要以root启动。可以为<code>listen *:80</code>、<code>listen 127.0.0.1:80</code>等形式。</li>\n<li><code>server_name</code><br>服务器名，如<code>localhost</code>、<code>www.example.com</code>，可以通过正则匹配。</li>\n</ul>\n<p><strong>模块http_stream</strong><br>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，<code>upstream</code>后接负载均衡器的名字，后端realserver以 <code>host:port options;</code> 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p>http服务中，某些特定的URL对应的一系列配置项。</p>\n<ul>\n<li><code>root /var/www/html</code><br>定义服务器的默认网站根目录位置。如果<code>location</code>URL匹配的是子目录或文件，<code>root</code>没什么作用，一般放在<code>server</code>指令里面或<code>/</code>下。</li>\n<li><code>index index.jsp index.html index.htm</code><br>定义路径下默认访问的文件名，一般跟着<code>root</code>放</li>\n<li><code>proxy_pass http:/backend</code><br>请求转向backend定义的服务器列表，即反向代理，对应<code>upstream</code>负载均衡器。也可以<code>proxy_passhttp://ip:port</code>。</li>\n<li><code>proxy_redirect off;</code><br><code>proxy_set_header Host $host;</code><br><code>proxy_set_header X-Real-IP $remote_addr;</code><br><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code><br>这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。</li>\n</ul>\n<p>关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 <a href=\"http://seanlook.com/2015/05/17/nginx-location-rewrite/\" target=\"_blank\" rel=\"noopener\">nginx配置location总结及rewrite规则写法</a>;</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"访问控制-allow-deny\"><a href=\"#访问控制-allow-deny\" class=\"headerlink\" title=\"访问控制 allow/deny\"></a>访问控制 allow/deny</h3><p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /nginx-status &#123;</span><br><span class=\"line\">  stub_status on;</span><br><span class=\"line\">  access_log off;</span><br><span class=\"line\">#  auth_basic   &quot;NginxStatus&quot;;</span><br><span class=\"line\">#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;</span><br><span class=\"line\"></span><br><span class=\"line\">  allow 192.168.10.100;</span><br><span class=\"line\">  allow 172.29.73.0/24;</span><br><span class=\"line\">  deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># htpasswd -c htpasswd admin</span><br><span class=\"line\">New passwd:</span><br><span class=\"line\">Re-type new password:</span><br><span class=\"line\">Adding password for user admin</span><br><span class=\"line\"></span><br><span class=\"line\"># htpasswd htpasswd admin    //修改admin密码</span><br><span class=\"line\"># htpasswd htpasswd sean    //多添加一个认证用户</span><br></pre></td></tr></table></figure>\n<p>这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。</p>\n<h3 id=\"列出目录-autoindex\"><a href=\"#列出目录-autoindex\" class=\"headerlink\" title=\"列出目录 autoindex\"></a>列出目录 autoindex</h3><p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入<code>autoindex on;</code>，另外两个参数最好也加上去:</p>\n<ul>\n<li><p><code>autoindex_exact_size off;</code> 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autoindex_localtime on;</span><br></pre></td></tr></table></figure>\n<p>默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /images &#123;</span><br><span class=\"line\">  root   /var/www/nginx-default/images;</span><br><span class=\"line\">  autoindex on;</span><br><span class=\"line\">  autoindex_exact_size off;</span><br><span class=\"line\">  autoindex_localtime on;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"http://liuqunying.blog.51cto.com/3984207/1420556\" target=\"_blank\" rel=\"noopener\">http://liuqunying.blog.51cto.com/3984207/1420556</a></li>\n<li><a href=\"http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity</a></li>\n<li><a href=\"http://wiki.nginx.org/HttpCoreModule#sendfile\" target=\"_blank\" rel=\"noopener\">http://wiki.nginx.org/HttpCoreModule#sendfile</a></li>\n<li><a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config\" target=\"_blank\" rel=\"noopener\">http://seanlook.com/2015/05/17/nginx-install-and-config</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}